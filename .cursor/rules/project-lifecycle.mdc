---
description: Project lifecycle — completion policy and validation (canonical; ERDs link here)
alwaysApply: false
lastReviewed: 2025-11-01
healthScore:
  content: green # Lifecycle stages, completion gates, validation; document standards extracted
  usability: green # Reduced from 680→~330 lines, improved scannability
  maintenance: green # Deep maintenance 2025-11-01, document standards extracted to separate rules
---

# Project Lifecycle — Completion Policy and Validation

## Purpose

Codify how projects transition through explicit lifecycle stages with clear entry/exit criteria, preventing premature closure through hard gates and validation requirements. Archiving is performed via a single full-folder move; per-file archiving is prohibited.

## Scope

Applies to all projects under `docs/projects/<name>/`. Documentation-first; automation is opt-in.

## Lifecycle Stages

Projects move through explicit stages with defined entry/exit criteria:

### 1. Scoping

**Entry**: Project idea approved; ERD created  
**Exit**: ERD complete; tasks outlined; acceptance criteria defined  
**Artifacts**: `erd.md`, `tasks.md` initialized  
**Status Tag**: `status: active`

### 2. Implementation

**Entry**: Tasks defined; work can begin  
**Exit**: All required deliverables complete; tests passing  
**Artifacts**: Code, tests, documentation created  
**Status Tag**: `status: active`

### 3. Validation

**Entry**: Implementation complete; ready for verification  
**Exit**: Validation criteria met (see Validation Periods below)  
**Artifacts**: Test results, measurements, validation logs  
**Status Tag**: `status: active` (validating)

### 4. Synthesis

**Entry**: Validation complete; ready to document findings  
**Exit**: Findings documented; recommendations made  
**Artifacts**: `findings.md`, updated `README.md`  
**Status Tag**: `status: active` (synthesizing)

### 5. Approval

**Entry**: All work complete; ready for closure review  
**Exit**: User/maintainer explicit sign-off obtained  
**Artifacts**: Pre-closure checklist complete (see below)  
**Status Tag**: `status: active` (pending approval)

### 6. Complete (Active)

**Entry**: Approved but has carryovers or requires monitoring  
**Exit**: All carryovers resolved; no active monitoring needed  
**Artifacts**: `final-summary.md`, carryovers documented  
**Status Tag**: `status: completed` + `completed: YYYY-MM-DD`  
**Note**: Project is done but not yet archived

### 7. Complete (Archived)

**Entry**: Complete (Active) + all carryovers resolved  
**Exit**: N/A (terminal state)  
**Artifacts**: All docs moved to `docs/projects/_archived/<YYYY>/<name>/`  
**Status Tag**: `status: completed` (in archived location)

## Pre-Closure Checklist (Hard Gates)

**MUST complete ALL items before marking project `status: completed`**

Cannot proceed to "Complete (Active)" if ANY item is unchecked:

- [ ] **All acceptance criteria from ERD validated**
  - Every criterion from ERD section (acceptance criteria) has been met
  - Evidence documented in findings.md or validation artifacts
- [ ] **All required deliverables complete**
  - Code/scripts/tools delivered (if applicable)
  - Documentation complete (README, findings, etc.)
  - Tests passing with adequate coverage
- [ ] **All "must complete" tasks checked off in tasks.md**
  - Critical path tasks marked `[x]`
  - Any unchecked tasks moved to approved Carryovers section
  - Engineer/maintainer explicitly approved carryovers
- [ ] **Validation period complete** (if project has applied fixes)
  - See "Validation Periods" section below
  - Baseline vs post-fix measurements documented
  - Success criteria met or failure documented
- [ ] **Success metrics achieved** (if quantitative targets specified)
  - Baseline measurements taken
  - Target thresholds reached
  - Comparison documented in findings.md
- [ ] **User/maintainer explicit approval obtained**
  - Cannot self-declare complete
  - User must say "this is complete" or equivalent
  - Approval documented in tasks.md or findings.md
- [ ] **Carryovers documented** (if any incomplete optional work)
  - Listed in tasks.md under `## Carryovers` section
  - Each carryover justified (why deferred)
  - Clear whether carryover blocks archival
- [ ] **Archive validation passing**
  - `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>` passes
  - OR manual checklist below complete
- [ ] **Findings Review Checkpoint** (For investigation projects only)
  - Review all findings documents for duplicates and redundancy
  - Extract all proposed actions from findings into tasks
  - Identify any sub-projects or carryovers from findings
  - Ensure findings lead to actionable improvements
  - **Rationale**: Prevents findings proliferation and ensures documentation results in improvements (Gap #14)

**If ANY item unchecked**: Project is NOT complete. Update status to reflect actual stage (Implementation, Validation, Synthesis, Approval).

**Archive Readiness** (for moving to Complete (Archived)):

- All carryovers resolved OR explicitly accepted as permanent
- No active monitoring needed
- Archive script validation passes

## Validation Periods (Mandatory for Projects with Applied Fixes)

If a project applies a fix or change that requires real-world validation:

### Validation Requirements

**Duration**: Specified in ERD or reasonable default

- Examples: "20-30 git operations", "1 week of usage", "50 API calls"

**Measurement**: Use baseline metrics established before fix

- Baseline documented
- Target threshold specified (e.g., ">90% compliance")
- Measurement method defined

**Success Criteria**: Must meet target threshold

- Success: Meets or exceeds target
- Partial: Shows improvement but below target
- Failure: No improvement or regression

### During Validation Period

**Status**: "ACTIVE — MONITORING" or Stage 3 (Validation)

- Continue normal work; data accumulates naturally
- Periodic check-ins (e.g., after 10, 20, 30 instances)
- Document observations in validation protocol document

**Cannot Mark Complete Until**:

- Validation period ends (sufficient data collected)
- AND success criteria met (or failure explicitly documented)

### After Validation Period

**If Success**: Proceed to Pre-Closure Checklist
**If Partial Success**: Document remaining gaps; decide next steps
**If Failure**: Return to Implementation; revise approach

**Example**: See `docs/projects/rules-enforcement-investigation/h1-validation-protocol.md`

## Status Tagging (ERD front matter)

```yaml
---
status: active|completed
completed: YYYY-MM-DD # required when completed
owner: <github-handle-or-team>
---
```

Location: `docs/projects/<name>/erd.md`. On archival, move entire folder to `docs/projects/_archived/<YYYY>/<name>/` in a single operation.

## Completion States & Criteria

**Lifecycle Flow**: Active (Stages 1-5) → Complete (Active) → Complete (Archived)

**Complete (Active)** requires:

1. ✅ Pre-Closure Checklist complete (all items checked — see above)
2. ERD front matter: `status: completed`, `completed: YYYY-MM-DD`, `owner`
3. All `tasks.md` items checked OR engineer-approved `Carryovers` section
4. `final-summary.md` with template front matter + `## Impact` section
5. Retrospective (standalone file or section in Final Summary)
6. `docs/projects/README.md` lists project under Completed with link
7. Tests/lint/types pass; coverage > 0% for new/changed modules

**Complete (Active) vs Complete (Archived)**:

- **Active**: Done but has carryovers or needs monitoring; stays in `docs/projects/<name>/`
- **Archived**: All carryovers resolved; no monitoring needed; moved to `docs/projects/_archived/<YYYY>/<name>/`

**When to stay "Complete (Active)"**:

- Has approved carryovers (future improvements, nice-to-haves)
- Requires periodic monitoring (validation period still running)
- Referenced by other active projects
- User prefers easy access (not ready to archive)

**When to move to "Complete (Archived)"**:

- All carryovers resolved or explicitly accepted as permanent
- No active monitoring or validation needed
- Historical reference only
- Ready to declutter active projects listLe

## Final Summary

**Required generator**: `.cursor/scripts/final-summary-generate.sh` (no manual template copying for initial creation).

**Timing options**:

- Pre-move: `--pre-move` flag → writes to `docs/projects/<name>/final-summary.md`
- Post-move: default → writes to `docs/projects/_archived/<YYYY>/<name>/final-summary.md`

Link from ERD near the top. Template: `.cursor/templates/project-lifecycle/final-summary.template.md`.

## Projects Index

Update `docs/projects/README.md`: move entry from Active to Completed, point to archived path.

## Which Script to Use (at a glance)

- Closeout in a PR (changed projects): `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>`
- Periodic repository health: `.cursor/scripts/project-lifecycle-validate.sh` (or `project-lifecycle-validate-sweep.sh` alias)
- Generate final summary:
  - Pre-move: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move [--date YYYY-MM-DD] [--force]`
  - Post-move: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> [--date YYYY-MM-DD] [--force]`
- Full archival workflow (preferred end-to-end): `.cursor/scripts/project-archive-workflow.sh --project <slug> --year <YYYY> [--verify-index] [--dry-run]`
- Single archive move only: `.cursor/scripts/project-archive.sh --project <slug> --year <YYYY> [--dry-run]`
- Backfill legacy projects: `.cursor/scripts/project-lifecycle-migrate.sh --project <slug>`

## Auto-Archive Integration (GitHub Action)

**Zero-touch archival**: When a project meets completion criteria, a GitHub Action automatically archives it after PR merge.

### Completion Criteria (ALL required)

A project is ready for auto-archive when:

1. ✅ **All tasks checked** — No unchecked `- [ ]` items in main task sections
2. ✅ **Carryovers resolved** — Either no `## Carryovers` section exists, OR section exists but contains no unchecked items
3. ✅ **Final summary written** — `final-summary.md` file exists in project directory

### Assistant Behavior

**Trigger**: When user checks the last task in `tasks.md`

**Detection logic**:

1. Count remaining unchecked tasks in main sections
2. If count = 0, check carryovers status
3. If carryovers resolved (no section or empty), prompt for final summary

**Required prompt**:

> "All tasks complete. Ready to write final summary for archival?"

**On "yes"**:

- Generate `final-summary.md` using `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move`
- Explain: "When you merge this PR, the auto-archive workflow will automatically archive the project to `_archived/<YYYY>/`"

**On "no"**:

- Explain: "Project won't auto-archive without final summary. You can generate it later with: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move`"

### Automated Workflow

**Trigger**: Push to `main` after PR merge

**Action behavior** (`.github/workflows/project-auto-archive.yml`):

1. Detect projects meeting all 3 criteria
2. Archive each project to `docs/projects/_archived/<current-year>/<slug>/`
3. Update ERD `status: completed` in archived location
4. Fix broken links automatically (`.cursor/scripts/archive-fix-links.sh`)
5. Regenerate `docs/projects/README.md`
6. Create PR with auto-merge enabled
7. PR merges when CI passes

**Benefits**:

- Zero manual steps after project completion
- Consistent archival (no forgotten cleanup)
- Automatic link fixing (prevents 404s)
- Batch efficiency (multiple projects in one PR)

**Project**: See `docs/projects/project-auto-archive-action/` for full implementation details

## Document Structure (at a glance)

| Document        | Purpose                  | Size Target   | Must Include                                                    | Must Exclude                                       |
| --------------- | ------------------------ | ------------- | --------------------------------------------------------------- | -------------------------------------------------- |
| **ERD**         | Requirements & approach  | 200-400 lines | Goals, acceptance criteria (narrative), risks, approach         | Execution checklists, findings, status updates     |
| **tasks.md**    | Execution checklists     | <200 lines    | Phase headers, sub-task checkboxes, Carryovers (if approved)    | Findings, requirements, retrospective, questions   |
| **findings.md** | Outcomes & retrospective | 150-300 lines | Root cause, deliverables, recommendations                       | Requirements, active checklists                    |
| **README.md**   | Navigation & overview    | <200 lines    | Brief overview (3-4 sentences), navigation links, quick actions | Detailed findings, metrics, implementation details |

**Task completion gate (blocking)**: All tasks in `tasks.md` must be checked OR engineer explicitly approves moving unchecked items to Carryovers. Assistant cannot independently defer tasks.

### Document Writing Standards

**For detailed writing standards, see**:

- **README.md structure and single entry point policy**: `project-readme-standards.mdc`
- **tasks.md structure and execution tracking**: `project-tasks-standards.mdc`
- **Per-project changelog guidance**: Template at `.cursor/templates/project-lifecycle/CHANGELOG.template.md` and `docs/projects/_archived/2025/per-project-changelog/`
- **Complex investigation structure**: `investigation-structure.mdc` for folder organization and decision frameworks

## Notes

- Archiving: single full-folder move to `docs/projects/_archived/<YYYY>/<name>` only.
- Migration: use `project-lifecycle-migrate.sh` to backfill artifacts; `final-summary-generate.sh` for new summaries (use `--pre-move` when needed); `template-fill.sh` is last-resort fallback.

## Archival Move Procedure

1. Confirm project Completed and stable.
2. Generate final summary (pre-move with `--pre-move` or post-move default); link from ERD.
3. Archive: `.cursor/scripts/project-archive.sh --project <slug> --year <YYYY> [--dry-run]` OR `git mv docs/projects/<slug> docs/projects/_archived/<YYYY>/<slug>` (single operation).
4. Validate: run `rules-validate.sh` and `links-check.sh --path docs/projects/_archived/<YYYY>/<slug>`; fix issues.
5. Update `docs/projects/README.md` Completed section to point to archived path.
6. Commit: `docs(projects): archive <name>`.
