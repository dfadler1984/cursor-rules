---
description: Project lifecycle — completion policy and validation (canonical; ERDs link here)
alwaysApply: false
lastReviewed: 2025-10-15
healthScore:
  content: green
  usability: yellow
  maintenance: green
---

# Project Lifecycle — Completion Policy and Validation

## Purpose

Codify how projects transition to Completed without breaking links: status tagging over moves, a closure checklist, a final summary, and an index update. Provide a light validator and optional automation.
Archiving is performed via a single full-folder move; per-file archiving is prohibited.

## Scope

Applies to all projects under `docs/projects/<name>/`. Documentation-first; automation is opt-in.

## Status Tagging (ERD front matter)

```yaml
---
status: active|completed
completed: YYYY-MM-DD # required when completed
owner: <github-handle-or-team>
---
```

Location: `docs/projects/<name>/erd.md`. On archival, move entire folder to `docs/projects/_archived/<YYYY>/<name>/` in a single operation.

## Completion States & Criteria

**Active** → **Complete (Active)** → **Complete (Archived)**

**Complete (Active)** requires:

1. ERD front matter: `status: completed`, `completed: YYYY-MM-DD`, `owner`
2. All `tasks.md` items checked OR engineer-approved `Carryovers` section
3. `final-summary.md` with template front matter + `## Impact` section
4. Retrospective (standalone file or section in Final Summary)
5. `docs/projects/README.md` lists project under Completed with link
6. Tests/lint/types pass; coverage > 0% for new/changed modules

**Complete (Archived)**: All carryovers resolved, no active monitoring needed, moved to `_archived/<YYYY>/`.

## Final Summary

**Required generator**: `.cursor/scripts/final-summary-generate.sh` (no manual template copying for initial creation).

**Timing options**:

- Pre-move: `--pre-move` flag → writes to `docs/projects/<name>/final-summary.md`
- Post-move: default → writes to `docs/projects/_archived/<YYYY>/<name>/final-summary.md`

Link from ERD near the top. Template: `.cursor/templates/project-lifecycle/final-summary.template.md`.

## Projects Index

Update `docs/projects/README.md`: move entry from Active to Completed, point to archived path.

## Which Script to Use (at a glance)

- Closeout in a PR (changed projects): `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>`
- Periodic repository health: `.cursor/scripts/project-lifecycle-validate.sh` (or `project-lifecycle-validate-sweep.sh` alias)
- Generate final summary:
  - Pre-move: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move [--date YYYY-MM-DD] [--force]`
  - Post-move: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> [--date YYYY-MM-DD] [--force]`
- Full archival workflow (preferred end-to-end): `.cursor/scripts/project-archive-workflow.sh --project <slug> --year <YYYY> [--verify-index] [--dry-run]`
- Single archive move only: `.cursor/scripts/project-archive.sh --project <slug> --year <YYYY> [--dry-run]`
- Backfill legacy projects: `.cursor/scripts/project-lifecycle-migrate.sh --project <slug>`

## Document Structure (at a glance)

| Document        | Purpose                  | Size Target   | Must Include                                                    | Must Exclude                                       |
| --------------- | ------------------------ | ------------- | --------------------------------------------------------------- | -------------------------------------------------- |
| **ERD**         | Requirements & approach  | 200-400 lines | Goals, acceptance criteria (narrative), risks, approach         | Execution checklists, findings, status updates     |
| **tasks.md**    | Execution checklists     | <200 lines    | Phase headers, sub-task checkboxes, Carryovers (if approved)    | Findings, requirements, retrospective              |
| **findings.md** | Outcomes & retrospective | 150-300 lines | Root cause, deliverables, recommendations                       | Requirements, active checklists                    |
| **README.md**   | Navigation & overview    | <200 lines    | Brief overview (3-4 sentences), navigation links, quick actions | Detailed findings, metrics, implementation details |

**Task completion gate (blocking)**: All tasks in `tasks.md` must be checked OR engineer explicitly approves moving unchecked items to Carryovers. Assistant cannot independently defer tasks.

## Validators

**Scoped** (per-PR changed projects): `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>`

- Checks: `final-summary.md` exists with template front matter + `## Impact`, `tasks.md` all checked or has `Carryovers`, retrospective present, no `*.template.md` files in project folder
- Advisory: warns if PR title doesn't start with `feat:` (pass via `--pr-title` or `PR_TITLE` env)

**Sweep** (all completed projects): `.cursor/scripts/project-lifecycle-validate-sweep.sh`

- Checks: ERD has `status: completed` + `completed:` + `owner:`, `final-summary.md` exists, index link present
- Dry-run by default; exits non-zero on failures

## Task List Process

- Execute one sub-task at a time; mark `[x]` immediately after completion.
- When parent task's children all checked: run tests/lint/types, stage changes, commit with Conventional Commit referencing task.
- Keep `Relevant Files` section current; add discovered tasks as they arise.

## Templates

Location: `.cursor/templates/project-lifecycle/`

- `final-summary.template.md`, `completion-checklist.template.md`, `retrospective.template.md`, `archive-checklist.template.md`

## PR Title Guidance

Prefer `feat: Finalize <Project Name>` or `feat(projects): finalize <name>` for changelog inclusion. Docs-only closures may use `docs: finalize <Project Name>`.

## Notes

- Archiving: single full-folder move to `docs/projects/_archived/<YYYY>/<name>` only.
- Migration: use `project-lifecycle-migrate.sh` to backfill artifacts; `final-summary-generate.sh` for new summaries (use `--pre-move` when needed); `template-fill.sh` is last-resort fallback.

## Archival Move Procedure

1. Confirm project Completed and stable.
2. Generate final summary (pre-move with `--pre-move` or post-move default); link from ERD.
3. Archive: `.cursor/scripts/project-archive.sh --project <slug> --year <YYYY> [--dry-run]` OR `git mv docs/projects/<slug> docs/projects/_archived/<YYYY>/<slug>` (single operation).
4. Validate: run `rules-validate.sh` and `links-check.sh --path docs/projects/_archived/<YYYY>/<slug>`; fix issues.
5. Update `docs/projects/README.md` Completed section to point to archived path.
6. Commit: `docs(projects): archive <name>`.
