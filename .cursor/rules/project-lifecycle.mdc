---
description: Project lifecycle — completion policy and validation (canonical; ERDs link here)
alwaysApply: false
lastReviewed: 2025-10-27
healthScore:
  content: green # Includes findings review, task naming, auto-archive, per-project changelog guidance
  usability: green # Clear completion criteria and lifecycle stages
  maintenance: green # Updated with per-project changelog section
---

# Project Lifecycle — Completion Policy and Validation

## Purpose

Codify how projects transition through explicit lifecycle stages with clear entry/exit criteria, preventing premature closure through hard gates and validation requirements. Archiving is performed via a single full-folder move; per-file archiving is prohibited.

## Scope

Applies to all projects under `docs/projects/<name>/`. Documentation-first; automation is opt-in.

## Lifecycle Stages

Projects move through explicit stages with defined entry/exit criteria:

### 1. Scoping

**Entry**: Project idea approved; ERD created  
**Exit**: ERD complete; tasks outlined; acceptance criteria defined  
**Artifacts**: `erd.md`, `tasks.md` initialized  
**Status Tag**: `status: active`

### 2. Implementation

**Entry**: Tasks defined; work can begin  
**Exit**: All required deliverables complete; tests passing  
**Artifacts**: Code, tests, documentation created  
**Status Tag**: `status: active`

### 3. Validation

**Entry**: Implementation complete; ready for verification  
**Exit**: Validation criteria met (see Validation Periods below)  
**Artifacts**: Test results, measurements, validation logs  
**Status Tag**: `status: active` (validating)

### 4. Synthesis

**Entry**: Validation complete; ready to document findings  
**Exit**: Findings documented; recommendations made  
**Artifacts**: `findings.md`, updated `README.md`  
**Status Tag**: `status: active` (synthesizing)

### 5. Approval

**Entry**: All work complete; ready for closure review  
**Exit**: User/maintainer explicit sign-off obtained  
**Artifacts**: Pre-closure checklist complete (see below)  
**Status Tag**: `status: active` (pending approval)

### 6. Complete (Active)

**Entry**: Approved but has carryovers or requires monitoring  
**Exit**: All carryovers resolved; no active monitoring needed  
**Artifacts**: `final-summary.md`, carryovers documented  
**Status Tag**: `status: completed` + `completed: YYYY-MM-DD`  
**Note**: Project is done but not yet archived

### 7. Complete (Archived)

**Entry**: Complete (Active) + all carryovers resolved  
**Exit**: N/A (terminal state)  
**Artifacts**: All docs moved to `docs/projects/_archived/<YYYY>/<name>/`  
**Status Tag**: `status: completed` (in archived location)

## Pre-Closure Checklist (Hard Gates)

**MUST complete ALL items before marking project `status: completed`**

Cannot proceed to "Complete (Active)" if ANY item is unchecked:

- [ ] **All acceptance criteria from ERD validated**
  - Every criterion from ERD section (acceptance criteria) has been met
  - Evidence documented in findings.md or validation artifacts
- [ ] **All required deliverables complete**
  - Code/scripts/tools delivered (if applicable)
  - Documentation complete (README, findings, etc.)
  - Tests passing with adequate coverage
- [ ] **All "must complete" tasks checked off in tasks.md**
  - Critical path tasks marked `[x]`
  - Any unchecked tasks moved to approved Carryovers section
  - Engineer/maintainer explicitly approved carryovers
- [ ] **Validation period complete** (if project has applied fixes)
  - See "Validation Periods" section below
  - Baseline vs post-fix measurements documented
  - Success criteria met or failure documented
- [ ] **Success metrics achieved** (if quantitative targets specified)
  - Baseline measurements taken
  - Target thresholds reached
  - Comparison documented in findings.md
- [ ] **User/maintainer explicit approval obtained**
  - Cannot self-declare complete
  - User must say "this is complete" or equivalent
  - Approval documented in tasks.md or findings.md
- [ ] **Carryovers documented** (if any incomplete optional work)
  - Listed in tasks.md under `## Carryovers` section
  - Each carryover justified (why deferred)
  - Clear whether carryover blocks archival
- [ ] **Archive validation passing**
  - `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>` passes
  - OR manual checklist below complete
- [ ] **Findings Review Checkpoint** (For investigation projects only)
  - Review all findings documents for duplicates and redundancy
  - Extract all proposed actions from findings into tasks
  - Identify any sub-projects or carryovers from findings
  - Ensure findings lead to actionable improvements
  - **Rationale**: Prevents findings proliferation and ensures documentation results in improvements (Gap #14)

**If ANY item unchecked**: Project is NOT complete. Update status to reflect actual stage (Implementation, Validation, Synthesis, Approval).

**Archive Readiness** (for moving to Complete (Archived)):

- All carryovers resolved OR explicitly accepted as permanent
- No active monitoring needed
- Archive script validation passes

## Validation Periods (Mandatory for Projects with Applied Fixes)

If a project applies a fix or change that requires real-world validation:

### Validation Requirements

**Duration**: Specified in ERD or reasonable default

- Examples: "20-30 git operations", "1 week of usage", "50 API calls"

**Measurement**: Use baseline metrics established before fix

- Baseline documented
- Target threshold specified (e.g., ">90% compliance")
- Measurement method defined

**Success Criteria**: Must meet target threshold

- Success: Meets or exceeds target
- Partial: Shows improvement but below target
- Failure: No improvement or regression

### During Validation Period

**Status**: "ACTIVE — MONITORING" or Stage 3 (Validation)

- Continue normal work; data accumulates naturally
- Periodic check-ins (e.g., after 10, 20, 30 instances)
- Document observations in validation protocol document

**Cannot Mark Complete Until**:

- Validation period ends (sufficient data collected)
- AND success criteria met (or failure explicitly documented)

### After Validation Period

**If Success**: Proceed to Pre-Closure Checklist
**If Partial Success**: Document remaining gaps; decide next steps
**If Failure**: Return to Implementation; revise approach

**Example**: See `docs/projects/rules-enforcement-investigation/h1-validation-protocol.md`

## Status Tagging (ERD front matter)

```yaml
---
status: active|completed
completed: YYYY-MM-DD # required when completed
owner: <github-handle-or-team>
---
```

Location: `docs/projects/<name>/erd.md`. On archival, move entire folder to `docs/projects/_archived/<YYYY>/<name>/` in a single operation.

## Completion States & Criteria

**Lifecycle Flow**: Active (Stages 1-5) → Complete (Active) → Complete (Archived)

**Complete (Active)** requires:

1. ✅ Pre-Closure Checklist complete (all items checked — see above)
2. ERD front matter: `status: completed`, `completed: YYYY-MM-DD`, `owner`
3. All `tasks.md` items checked OR engineer-approved `Carryovers` section
4. `final-summary.md` with template front matter + `## Impact` section
5. Retrospective (standalone file or section in Final Summary)
6. `docs/projects/README.md` lists project under Completed with link
7. Tests/lint/types pass; coverage > 0% for new/changed modules

**Complete (Active) vs Complete (Archived)**:

- **Active**: Done but has carryovers or needs monitoring; stays in `docs/projects/<name>/`
- **Archived**: All carryovers resolved; no monitoring needed; moved to `docs/projects/_archived/<YYYY>/<name>/`

**When to stay "Complete (Active)"**:

- Has approved carryovers (future improvements, nice-to-haves)
- Requires periodic monitoring (validation period still running)
- Referenced by other active projects
- User prefers easy access (not ready to archive)

**When to move to "Complete (Archived)"**:

- All carryovers resolved or explicitly accepted as permanent
- No active monitoring or validation needed
- Historical reference only
- Ready to declutter active projects listLe

## Final Summary

**Required generator**: `.cursor/scripts/final-summary-generate.sh` (no manual template copying for initial creation).

**Timing options**:

- Pre-move: `--pre-move` flag → writes to `docs/projects/<name>/final-summary.md`
- Post-move: default → writes to `docs/projects/_archived/<YYYY>/<name>/final-summary.md`

Link from ERD near the top. Template: `.cursor/templates/project-lifecycle/final-summary.template.md`.

## Projects Index

Update `docs/projects/README.md`: move entry from Active to Completed, point to archived path.

## Which Script to Use (at a glance)

- Closeout in a PR (changed projects): `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>`
- Periodic repository health: `.cursor/scripts/project-lifecycle-validate.sh` (or `project-lifecycle-validate-sweep.sh` alias)
- Generate final summary:
  - Pre-move: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move [--date YYYY-MM-DD] [--force]`
  - Post-move: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> [--date YYYY-MM-DD] [--force]`
- Full archival workflow (preferred end-to-end): `.cursor/scripts/project-archive-workflow.sh --project <slug> --year <YYYY> [--verify-index] [--dry-run]`
- Single archive move only: `.cursor/scripts/project-archive.sh --project <slug> --year <YYYY> [--dry-run]`
- Backfill legacy projects: `.cursor/scripts/project-lifecycle-migrate.sh --project <slug>`

## Auto-Archive Integration (GitHub Action)

**Zero-touch archival**: When a project meets completion criteria, a GitHub Action automatically archives it after PR merge.

### Completion Criteria (ALL required)

A project is ready for auto-archive when:

1. ✅ **All tasks checked** — No unchecked `- [ ]` items in main task sections
2. ✅ **Carryovers resolved** — Either no `## Carryovers` section exists, OR section exists but contains no unchecked items
3. ✅ **Final summary written** — `final-summary.md` file exists in project directory

### Assistant Behavior

**Trigger**: When user checks the last task in `tasks.md`

**Detection logic**:

1. Count remaining unchecked tasks in main sections
2. If count = 0, check carryovers status
3. If carryovers resolved (no section or empty), prompt for final summary

**Required prompt**:

> "All tasks complete. Ready to write final summary for archival?"

**On "yes"**:

- Generate `final-summary.md` using `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move`
- Explain: "When you merge this PR, the auto-archive workflow will automatically archive the project to `_archived/<YYYY>/`"

**On "no"**:

- Explain: "Project won't auto-archive without final summary. You can generate it later with: `.cursor/scripts/final-summary-generate.sh --project <slug> --year <YYYY> --pre-move`"

### Automated Workflow

**Trigger**: Push to `main` after PR merge

**Action behavior** (`.github/workflows/project-auto-archive.yml`):

1. Detect projects meeting all 3 criteria
2. Archive each project to `docs/projects/_archived/<current-year>/<slug>/`
3. Update ERD `status: completed` in archived location
4. Fix broken links automatically (`.cursor/scripts/archive-fix-links.sh`)
5. Regenerate `docs/projects/README.md`
6. Create PR with auto-merge enabled
7. PR merges when CI passes

**Benefits**:

- Zero manual steps after project completion
- Consistent archival (no forgotten cleanup)
- Automatic link fixing (prevents 404s)
- Batch efficiency (multiple projects in one PR)

**Project**: See `docs/projects/project-auto-archive-action/` for full implementation details

## Document Structure (at a glance)

| Document        | Purpose                  | Size Target   | Must Include                                                    | Must Exclude                                       |
| --------------- | ------------------------ | ------------- | --------------------------------------------------------------- | -------------------------------------------------- |
| **ERD**         | Requirements & approach  | 200-400 lines | Goals, acceptance criteria (narrative), risks, approach         | Execution checklists, findings, status updates     |
| **tasks.md**    | Execution checklists     | <200 lines    | Phase headers, sub-task checkboxes, Carryovers (if approved)    | Findings, requirements, retrospective, questions   |
| **findings.md** | Outcomes & retrospective | 150-300 lines | Root cause, deliverables, recommendations                       | Requirements, active checklists                    |
| **README.md**   | Navigation & overview    | <200 lines    | Brief overview (3-4 sentences), navigation links, quick actions | Detailed findings, metrics, implementation details |

**Task completion gate (blocking)**: All tasks in `tasks.md` must be checked OR engineer explicitly approves moving unchecked items to Carryovers. Assistant cannot independently defer tasks.

### README.md as Single Entry Point

**Purpose**: Navigation hub — one authoritative overview for the project

**Structure**:

```markdown
# Project Name

**Brief Overview** (3-4 sentences)

- What problem does this solve?
- What was delivered?
- Current status?

## Navigation

### Quick Start (5 minutes)

- Links to key sections for new readers

### Deep Dive (1-2 hours)

- Links to detailed technical docs

### Implementation Reference

- Links to tasks, ERD, findings

## Quick Actions

- Command examples for using deliverables

## Status

- Current phase, completion %, next steps
```

**Single Entry Point Policy**:

- ✅ **One README.md** per project (always)
- ❌ **Avoid multiple summaries** unless justified

**When Multiple Summaries Are Justified**:

- Different audiences with distinct information needs
  - Example: Technical deep-dive for engineers, executive summary for stakeholders
- Different formats serve different purposes
  - Example: Interactive demo vs static documentation
- Must articulate: "Summary X is for audience Y who needs Z information"

**When Multiple Summaries Are NOT Justified** (Avoid):

- Content overlap >50% (consolidate into single README)
- Same audience, same information, slightly different framing
- Progressive detail (use sections in single doc instead)
- Temporal updates ("v1 summary", "v2 summary" — update the original)

**Evidence of Proliferation**:

- The rules-enforcement-investigation project created 3 summary documents:
  - README.md, BREAKTHROUGH-SUMMARY.md, EXECUTIVE-SUMMARY.md
  - Content overlap: 70-80% (all telling same story)
  - Result: 15 total files, unclear which is authoritative, wasted consolidation effort

**Correct Approach**:

- README.md with navigation to different depths
- Section 1: Quick Start (5 min)
- Section 2: Understanding Results (10 min)
- Section 3: Deep Dive (1-2 hours)
- All in one file; reader chooses depth

**Exception**: If project genuinely needs specialized summaries (rare), document justification in README and link prominently.

### tasks.md Structure (Strict)

**Purpose**: Execution tracking ONLY — phase sections with checkboxes

**Format**:

```markdown
## Phase N: Phase Name

- [ ] Parent Task
  - [ ] Sub-task 1
  - [ ] Sub-task 2
  - [ ] Sub-task 3

## Carryovers (Optional — Requires Approval)

- [ ] Deferred task — Reason: not critical; future enhancement
```

**Must Include**:

- Phase headers (## Phase N: Name)
- Task checkboxes (- [ ] or - [x])
- Sub-tasks indented under parents
- Carryovers section (if applicable) with justifications

**Task Naming Guidance** (Specificity Required):

- **Bad**: "Create final summary" (ambiguous - new file or enhance existing?)
- **Good**: "Enhance README.md with executive summary section"
- **Bad**: "Write completion document" (vague)
- **Good**: "Update README.md status section with completion details"
- **Principle**: Task names should specify file/location, not just intent
- **Why**: Prevents accidental file proliferation and clarifies expected action (Gap #13)

**Must Exclude** (Put These Elsewhere):

- ❌ Findings or outcomes → `findings.md`
- ❌ Requirements or acceptance criteria → `erd.md`
- ❌ Questions or discussion → `erd.md` (Risks section) or separate doc
- ❌ Success criteria or metrics → `erd.md` (Acceptance Criteria section)
- ❌ Status updates or progress notes → `README.md` or project management tool
- ❌ Retrospective or lessons learned → `findings.md`
- ❌ Implementation details or code snippets → code files or technical docs

**Why Strict**:

- Prevents content bloat (this investigation's tasks.md grew to 333 lines, 152 non-task)
- Clear separation of concerns (checklists vs narrative vs findings)
- Easy to scan for "what's left to do"
- Simple completion validation (all checkboxes checked?)

**Example of Bloat to Avoid**:

```markdown
## Phase 2: Implementation

- [x] Build tool X
  - Results: 95% success rate (baseline was 70%)
  - Questions: Should we optimize further? What about edge case Y?
  - Next steps: Consider refactor if time permits
```

**Correct Format**:

```markdown
## Phase 2: Implementation

- [x] Build tool X
- [ ] Optimize tool X (if results < 90%)
- [ ] Handle edge case Y
```

(Results, questions, and next steps belong in `findings.md` or `README.md`)

### ERD vs tasks.md: Acceptance Criteria

**Separation Principle**: ERD describes requirements (what); tasks.md tracks execution (status)

**In ERD** (Acceptance Criteria section):

- Narrative description of success criteria
- "The system must..." or "Deliverables include..."
- Thresholds and targets explained
- Context and rationale

**Example (ERD)**:

```markdown
## Acceptance Criteria

1. **Measurement Framework**: Create tools to measure script usage, TDD compliance, and branch naming compliance. Each tool must output rates, accept a limit parameter, and exit with appropriate codes.

2. **Baseline Metrics**: Establish baseline measurements across 100 recent commits showing current compliance levels for comparison with post-fix measurements.

3. **Test Plans**: Comprehensive test plans for Hypotheses 1-3 and slash commands experiment, each with measurement protocols and success criteria.
```

**In tasks.md** (Execution tracking):

- Checklist derived from ERD criteria
- One checkbox per deliverable or milestone
- Status only (checked or unchecked)

**Example (tasks.md)**:

```markdown
## Phase 4: Measurement & Validation

- [x] 4.0 Create compliance measurement tools
  - [x] 4.1 Build check-script-usage.sh
  - [x] 4.2 Build check-tdd-compliance.sh
  - [x] 4.3 Build check-branch-names.sh
  - [x] 4.4 Build compliance-dashboard.sh
  - [x] 4.5 TDD-test all scripts
  - [x] 4.6 Establish baseline metrics
```

**Why Separate**:

- ERD stable (requirements don't change often)
- tasks.md dynamic (checkboxes change constantly)
- Avoids duplication (one source of truth for requirements)
- Clear transformation: narrative requirement → executable checklist

## Validators

**Scoped** (per-PR changed projects): `.cursor/scripts/project-lifecycle-validate-scoped.sh <slug>`

- Checks: `final-summary.md` exists with template front matter + `## Impact`, `tasks.md` all checked or has `Carryovers`, retrospective present, no `*.template.md` files in project folder
- Advisory: warns if PR title doesn't start with `feat:` (pass via `--pr-title` or `PR_TITLE` env)

**Sweep** (all completed projects): `.cursor/scripts/project-lifecycle-validate-sweep.sh`

- Checks: ERD has `status: completed` + `completed:` + `owner:`, `final-summary.md` exists, index link present
- Dry-run by default; exits non-zero on failures

## Task List Process

- Execute one sub-task at a time; mark `[x]` immediately after completion.
- When parent task's children all checked: run tests/lint/types, stage changes, commit with Conventional Commit referencing task.
- Keep `Relevant Files` section current; add discovered tasks as they arise.

## Templates

Location: `.cursor/templates/project-lifecycle/`

- `final-summary.template.md`, `completion-checklist.template.md`, `retrospective.template.md`, `archive-checklist.template.md`
- `CHANGELOG.template.md` — Per-project changelog (optional, recommended for investigations)

## Per-Project Changelog (Optional)

**Purpose**: Track project evolution, decisions, and milestones in a structured format.

**When to use**:

- Complex investigations (>15 files)
- Projects spanning multiple sessions or weeks
- When returning contributors need quick context on "what's changed"

**When NOT to use**:

- Simple projects (<10 files) — use README updates instead
- Projects with comprehensive session summaries already

### Format

Use the template at `.cursor/templates/project-lifecycle/CHANGELOG.template.md`:

- Keep-a-Changelog inspired format
- Project-specific categories: Added, Changed, Decisions, Removed, Fixed
- Organized by phases (matching `tasks.md` phases)
- High-level entries only (not every commit)

### When to Update

- End of significant work sessions
- After major decisions or scope changes
- Before phase transitions
- During project completion/archival

### Example Structure

```markdown
# Changelog — Project Title

## [Unreleased]

### Added

- New features or capabilities

### Changed

- Scope changes, approach pivots

### Decisions

- Key decisions with rationale

## [Phase 1: Discovery] - 2025-10-20

### Summary

Completed initial research and prototyping.

### Added

- Created ERD with 3 solution options
- Built proof-of-concept validator

### Decisions

- Chose Option B (simpler, faster to implement)
- Deferred auto-generation to Phase 2
```

### Integration

- **Project creation**: Use `--with-changelog` flag in `project-create.sh` (when available)
- **Archival**: `project-archive-workflow.sh` prompts for final changelog entry
- **Validation**: Completed projects should have changelog OR explicit skip reason

### Tips

- Link to detailed session summaries or findings when relevant
- Focus on "what changed" and "why" (not implementation details)
- Use past tense for completed work
- Remove empty categories in phase sections

### Related

- See `docs/projects/per-project-changelog/` for full implementation project
- See template at `.cursor/templates/project-lifecycle/CHANGELOG.template.md`

## PR Title Guidance

Prefer `feat: Finalize <Project Name>` or `feat(projects): finalize <name>` for changelog inclusion. Docs-only closures may use `docs: finalize <Project Name>`.

## Complex Investigation Structure

**When to use**: Investigations with multiple hypotheses, substantial testing, >15 files

**When NOT to use**: Simple projects with <10 files; use basic README/erd/tasks structure

### Folder Structure

**Root files** (baseline):

- `README.md` - Entry point, navigation
- `erd.md` - Requirements and scope
- `tasks.md` - Execution tracking
- `coordination.md` - For umbrella projects with sub-projects
- High-level protocols (case-by-case exceptions)

**Organized folders**:

- `findings/` - Individual finding documents (README + gap-##-<name>.md files)
- `analysis/` - Deep analysis (flat files + subfolders for large topics)
- `decisions/` - Decision documents (<topic>-decision.md)
- `guides/` - Reference guides for using outputs
- `protocols/` - Test/validation procedures
- `sessions/` - Session summaries (YYYY-MM-DD.md)
- `test-results/` - Test execution data (organized by hypothesis)
- `tests/` - Test plan templates
- `_archived/` - Archived documents

**Decision framework**:

- **New file vs update**: Create new for new topic (>200 lines if added to existing)
- **Subfolder vs flat**: Create subfolder when topic has 3+ files
- **Sub-project vs analysis**: Create sub-project when ERD-worthy scope (5+ requirements, independent execution)

**Sub-projects pattern**:

- Flat siblings in `docs/projects/` (not nested)
- Parent has `coordination.md` tracking all sub-projects
- Each sub-project README links to parent
- When complete, outcome captured in parent's coordination.md

**Example**: [rules-enforcement-investigation](../../docs/projects/rules-enforcement-investigation/) - 40 files reorganized into 10 folders + 3 sub-projects

**Full standard**: See [investigation-docs-structure/structure-standard.md](../../docs/projects/investigation-docs-structure/structure-standard.md)

## Notes

- Archiving: single full-folder move to `docs/projects/_archived/<YYYY>/<name>` only.
- Migration: use `project-lifecycle-migrate.sh` to backfill artifacts; `final-summary-generate.sh` for new summaries (use `--pre-move` when needed); `template-fill.sh` is last-resort fallback.

## Archival Move Procedure

1. Confirm project Completed and stable.
2. Generate final summary (pre-move with `--pre-move` or post-move default); link from ERD.
3. Archive: `.cursor/scripts/project-archive.sh --project <slug> --year <YYYY> [--dry-run]` OR `git mv docs/projects/<slug> docs/projects/_archived/<YYYY>/<slug>` (single operation).
4. Validate: run `rules-validate.sh` and `links-check.sh --path docs/projects/_archived/<YYYY>/<slug>`; fix issues.
5. Update `docs/projects/README.md` Completed section to point to archived path.
6. Commit: `docs(projects): archive <name>`.
