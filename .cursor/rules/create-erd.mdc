---
description: Engineering Requirements Document (ERD) creation workflow and template for Cursor
alwaysApply: false
lastReviewed: 2025-11-01
healthScore:
  content: green # Clear structure, Full/Lite modes, separation guidance
  usability: green # Section numbering fixed in examples
  maintenance: green # Deep maintenance 2025-11-01, structural fixes applied
---

# Rule: ERD Creation (Default: Full)

## Goal

Guide the assistant to create clear, actionable Engineering Requirements Documents (ERDs) with engineering-focused sections (architecture, non-functional requirements, rollout/ops). Default to Full mode unless the user explicitly requests Lite.

**ERD Scope**: Requirements and approach ONLY. Findings, retrospectives, and detailed execution timelines belong in separate documents.

## ERD Scope Definition

**What ERDs Contain** (Requirements Focus):

- Problem statement and goals
- Functional and non-functional requirements
- Architecture and design approach
- Acceptance criteria (narrative requirements, not execution checklists)
- Risks and constraints
- Success metrics (how to measure, not actual results)
- Open questions (before work starts)

**What ERDs Do NOT Contain** (Put Elsewhere):

- ❌ **Findings or Outcomes** → Create separate `findings.md`

  - Actual results, measurements, discoveries
  - Root cause analysis, retrospective
  - Lessons learned, meta-findings

- ❌ **Execution Checklists** → Goes in `tasks.md`

  - Checkbox-based task tracking
  - Sub-task breakdowns with status
  - Phase completion tracking

- ❌ **Detailed Week-by-Week Timelines** → Goes in `tasks.md` or project management tool

  - Specific dates for each task
  - Sprint planning details
  - Resource allocation

- ❌ **Status Updates** → Goes in `README.md` or `tasks.md` header
  - "Phase X complete", "Currently working on Y"
  - Blockers and progress notes
  - Percentage completion

**Why Strict Scope**:

- ERDs are **stable** (requirements change less than execution)
- Prevents ERD bloat (investigation ERD grew to 441 lines with findings/timeline mixed in)
- Clear document boundaries (requirements ≠ outcomes ≠ execution)
- Easier to reference (requirements in one place)

**Example of Scope Creep to Avoid**:

```markdown
# Don't do this in ERD:

## 10. Timeline and Phases (detailed week-by-week)

Week 1: Days 1-2 baseline, Days 3-4 implement, Day 5 test...
[detailed execution plan]

## 11. Findings and Carryovers (73 lines)

We discovered that conditional attachment is the root cause...
[extensive retrospective and lessons learned]
```

**Correct Separation**:

- ERD section 10: "Timeline (Overview)" — High-level phases only (e.g., "Phase 1: 1 week, Phase 2: 2 weeks")
- findings.md: Full retrospective with root cause, lessons, carryovers
- tasks.md: Detailed execution checklists with phase breakdowns

**Evidence**: The rules-enforcement-investigation project's ERD section 11 contained 73 lines of findings/retrospective (should have been in separate findings.md from start).

## Triggers

- Phrases: create|generate|draft|write|produce + erd|engineering requirements document|engineering spec|eng spec
- Optional modifiers: lite|quick → selects Lite mode; otherwise default is Full.
- Slash-commands: `/specify`, `/clarify`, `/plan` (see `spec-driven.mdc`)

## Clarifying Questions (required before generation)

Ask concise questions with selectable options when possible:

- Problem/Goal: What problem does this solve? Desired outcome?
- Target User: Primary persona/team/system?
- Scope: Net-new, extension, or refactor? Any non-goals?
- Core Functionality: Key capabilities and flows?
- Non-Functional: SLOs/latency, reliability, security/privacy, cost?
- Architecture: Required patterns or integration points?
- Data: Read/write data, schemas/migrations, retention/PII?
- API/Contracts: New/updated REST/GraphQL/events? Versioning/back-compat?
- Ops/Rollout: Feature flags, migrations, monitoring, rollback?
- Testing & Acceptance: Entry/exit criteria, tests to prove behavior?
- Success Metrics: How will we measure success?
- Output Path/Name: Confirm `docs/projects/<feature>/erd.md`; provide `<feature>`.
- Mode: Full (default) or Lite?

### Uncertainty markers

- When information is ambiguous or missing, include explicit markers in the ERD:
  - `[NEEDS CLARIFICATION: <short question>]`
  - Do not guess; surface unknowns for confirmation.

Before generating, print a consolidated list of all `[NEEDS CLARIFICATION]` items at the end so the user can resolve them quickly.

## Output Location

- Path: `docs/projects/<feature>/erd.md`
- Filename: `erd.md` under `docs/projects/<feature>/` (kebab-case `<feature>` directory)
- Create the directory if it does not exist; do not write outside `docs/projects/<feature>/`.

## ERD Structures

### Full ERD (default)

1. Introduction/Overview
2. Goals/Objectives
3. User Stories
4. Functional Requirements
5. Non-Functional Requirements
6. Architecture/Design
7. Data Model and Storage
8. API/Contracts
9. Integrations/Dependencies
10. Edge Cases and Constraints
11. Testing & Acceptance (narrative criteria, NOT checklists)
12. Rollout & Ops
13. Success Metrics
14. Open Questions

### Lite ERD (explicit opt-in)

1. Introduction/Overview — 1–2 paragraphs
2. Goals/Objectives — 3–5 bullets
3. Functional Requirements — 3–10 items
4. Acceptance Criteria (narrative, NOT checklists) — 3–7 bullets
5. Risks/Edge Cases — top 3–5
6. Rollout Note — flag/owner/date (one-liner)

Optional (Lite): Non-Functional (short), Success Metrics (1–3 bullets)

### Acceptance Criteria Format (Important)

**Write as narrative requirements, NOT execution checklists**:

**❌ Don't write checklists in ERD**:

```markdown
## 11. Testing & Acceptance

- [ ] Build measurement framework
  - [ ] Create script-usage checker
  - [ ] Create TDD compliance checker
- [ ] Establish baseline metrics
- [ ] Run validation tests
```

**✅ Do write narrative requirements**:

```markdown
## 11. Testing & Acceptance

1. **Measurement Framework**: The system must provide automated tools to measure
   script usage compliance, TDD compliance, and branch naming compliance. Each tool
   must output percentage rates, accept a limit parameter, and return appropriate
   exit codes for CI integration.

2. **Baseline Metrics**: Compliance baselines must be established across at least
   100 recent commits, providing comparison points for post-implementation validation.

3. **Validation**: Applied fixes must be validated over a minimum of 20-30 real-world
   instances with success defined as achieving >90% compliance.
```

**Why Narrative Format**:

- ERD describes **what** must be achieved (requirements)
- tasks.md describes **how** to execute (checklists)
- ERD is stable; tasks.md changes frequently
- Prevents duplication (requirements in ERD, execution in tasks)
- Clear transformation: requirement → task checklist (done by `generate-tasks-from-erd.mdc`)

**Transformation to tasks.md** (done separately):

```markdown
## Phase 4: Measurement & Validation

- [ ] 4.0 Create compliance measurement tools
  - [ ] 4.1 Build check-script-usage.sh
  - [ ] 4.2 Build check-tdd-compliance.sh
  - [ ] 4.3 Build check-branch-names.sh
```

**Reference**: See `generate-tasks-from-erd.mdc` for transformation process

## Templates

- Full template: `.cursor/rules/erd-full.md` (reference-only)
- Lite template: `.cursor/rules/erd-lite.md` (reference-only)

## Process

1. Receive Initial Prompt
   - User expresses a need to create or update an ERD for a feature or change.
2. Ask Clarifying Questions (Required)
   - Before writing the ERD, the assistant must ask clarifying questions to understand the problem, scope, constraints, and outputs.
   - Provide options (letters/numbers) for quick user selection.
3. Generate ERD
   - Use the structure defined above. Include engineering-focused sections.
   - Omit optional sections if the user opts out.
4. Save ERD
   - Location: `docs/projects/<feature>/erd.md`
   - Format: Markdown (`.md`)

## Audience

- Primary: Junior engineers. Keep requirements explicit, unambiguous, and testable.

## Defaults and Guardrails

- Default Mode: Full (unless user explicitly says Lite/Quick)
- Require clarifying questions before generation
- Enforce path/filename convention above
- Keep outputs concise and scannable; prefer lists and numbered items
- Omit optional sections only if the user opts out explicitly
- Consent-first: Do not write files without explicit user direction

## Manual Invocation & Intent Routing

- This rule should not auto-attach; it is invoked when the user asks to create an ERD or via manual reference.
- Trigger pattern: <verb> + <erd-term> [optional: <lite|quick>]
  - Verbs: create|generate|draft|write|produce
  - ERD terms: erd|engineering requirements document|engineering requirements doc|engineering spec|eng spec
  - If `lite` or `quick` is present, generate Lite mode

## References

- Inspiration: PRD generation rule ([link](https://raw.githubusercontent.com/snarktank/ai-dev-tasks/refs/heads/main/create-prd.md))
