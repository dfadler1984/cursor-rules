---
description: Prompt templates for Git operations (user-initiated workflow guidance)
alwaysApply: false
lastReviewed: 2025-10-20
healthScore:
  content: yellow
  usability: green
  maintenance: green
---

# Git Commands — Prompt Templates

**Purpose**: Guide users to repository scripts via Cursor's prompt template system (`.cursor/commands/`).

**Status**: READY FOR IMPLEMENTATION — Templates to be created

**Background**: Cursor's `/` prefix loads prompt templates (not runtime routing). Templates provide discoverability and usage guidance for repository scripts.

## Prompt Templates to Create

Create templates in `.cursor/commands/` directory:

### High-Priority Templates (Git Workflows)

**`commit.md`** — Conventional commits helper

```markdown
Use the repository's conventional commit script:

\`\`\`bash
bash .cursor/scripts/git-commit.sh --type <feat|fix|...> --description "..."
\`\`\`

**Available types**: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert

**With body**: Add `--body "line"` for each body line

**Breaking change**: Add `--breaking "description"`

See: [assistant-git-usage.mdc](./assistant-git-usage.mdc)
```

**`pr.md`** — Pull request creation

```markdown
Create PR via repository script:

\`\`\`bash
bash .cursor/scripts/pr-create.sh --title "..." [--body "..."]
\`\`\`

**Multi-line body**: Use ANSI-C quoting or heredoc (see assistant-git-usage.mdc)

**Authentication**: Set GITHUB_TOKEN or GH_TOKEN

See: [assistant-git-usage.mdc](./assistant-git-usage.mdc)
```

**`branch.md`** — Branch naming helper

```markdown
Generate branch name via repository script:

\`\`\`bash
bash .cursor/scripts/git-branch-name.sh --task <slug> [--type <feat|fix|...>] [--apply]
\`\`\`

**Pattern**: `<login>/<type>-<feature>-<task>`

**Types**: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert

See: [assistant-git-usage.mdc](./assistant-git-usage.mdc)
```

### Medium-Priority Templates (Helpers)

**`status.md`** — Repository status

```markdown
Check repository status:

\`\`\`bash
git status --porcelain=v1
\`\`\`
```

**`test.md`** — Run tests with TDD guidance

```markdown
Run tests following TDD workflow:

**Focused run** (specific file):
\`\`\`bash
yarn test <path> -t "test name"
\`\`\`

**TDD reminder**: Red → Green → Refactor

See: [tdd-first.mdc](./tdd-first.mdc)
```

## Template Benefits

- **Discoverability**: Users learn scripts exist via `/` prefix
- **Guidance**: Templates show correct script usage and examples
- **Zero context cost**: Load on-demand (not in every context)
- **User-initiated**: Templates for workflows users explicitly request
- **Complements alwaysApply**: Different enforcement layer

## Implementation Steps

1. **Create `.cursor/commands/` directory** (if not exists)
2. **Create template files**: `commit.md`, `pr.md`, `branch.md`, `status.md`, `test.md`
3. **Test in Cursor**: Type `/commit` and verify template loads
4. **Measure adoption**: Track template usage over 20-30 operations
5. **Iterate**: Add more templates based on user feedback

## Measurement (After Implementation)

Track effectiveness over 20-30 git operations:

- Template usage rate (how often users type `/command`)
- Script compliance when template used vs not used
- User feedback (helpful? discoverable?)

**Success criteria**:

- Template usage >50% for git operations
- Script compliance >95% when template used
- OR: Templates improve discoverability even if compliance unchanged

## History

**2025-10-16**: Created as runtime routing experiment  
**2025-10-20**: Updated to prompt template guidance (runtime routing doesn't work per Cursor design)

## Related

- See `assistant-git-usage.mdc` for script-first protocol
- See [Cursor Commands Documentation](https://cursor.com/docs/agent/chat/commands) for template system
- See `docs/projects/rules-enforcement-investigation/` for experiment findings
