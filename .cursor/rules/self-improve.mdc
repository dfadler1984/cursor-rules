---
description: Pattern-based rule improvement with consent-gated proposals
alwaysApply: true
lastReviewed: 2025-11-01
healthScore:
  content: green # Core pattern recognition, rule creation/updates
  usability: green # Reduced from 363→~190 lines, investigation workflows extracted
  maintenance: green # Deep maintenance 2025-11-01, investigation workflows moved to investigation-workflow.mdc
---

## Rule Improvement Triggers

- New code patterns not covered by existing rules
- Repeated similar implementations across files (3+ instances)
- Common error patterns that could be prevented
- New libraries or tools being used consistently (3+ modules)
- Emerging best practices in the codebase
- Recurring feedback in clarifications or code reviews
- **User corrections to process order** (e.g., "document first", "plan before implementing")
- **Rule gaps observed during active investigations** (see Special Cases below)
- **Guidance exists in project docs but not in .cursor/rules/** (see Rule Creation below)

## Analysis Process

- Compare new code with existing rules
- Identify patterns that should be standardized
- Look for references to external documentation
- Check for consistent error handling patterns
- Monitor test patterns and coverage

## Observation (always-on, passive)

- During normal work, silently note patterns meeting trigger thresholds
- No tool calls, logs, or file writes during observation
- Session-scoped state only; observations reset at session boundary
- Queue proposals until natural checkpoints (never interrupt mid-task)

## Proposals (consent-gated, checkpointed)

Surface proposals only at natural boundaries:

- After Green in TDD cycle (tests passing)
- After PR created (via `.cursor/scripts/pr-create.sh`)
- After task marked complete (via `todo_write` with status: completed)
- When user asks "anything else?" or similar wrap-up phrase

Proposal format:

- Pattern: <one-line description>
- Evidence: <file paths or commit refs>
- Proposed change: <add/modify/deprecate rule X>
- Impact: <who benefits, what improves>

User responses:

- "Yes"/"Proceed"/"Go ahead" → create rule update with evidence
- "No"/"Skip"/"Not now" → suppress for session; do not re-ask
- Silence → drop and continue

## Rule Creation (Immediate Action Required)

**When discovering guidance that should be a rule**:

### Trigger: Useful Guidance Not in .cursor/rules/

**If you discover**:

- Guidance in project documentation (`docs/projects/`) that should apply during work
- Structure standards that need enforcement
- Patterns documented but not in rule files
- References to "follow X standard" where X is only in a separate project

**Then**:

1. **Flag immediately**: "This guidance should be a rule file"
2. **Check**: Does rule file exist in `.cursor/rules/`?
3. **If NO**: Propose creating it NOW (don't wait for checkpoint)
4. **If YES**: Link to existing rule instead

**Example (Gap #11)**:

- Discovered: `investigation-docs-structure/structure-standard.md` has clear guidance
- Checked: NO `.cursor/rules/investigation-structure.mdc` exists
- **Should have**: Proposed "Should I create investigation-structure.mdc?"
- **Actually did**: Violated structure without proposing rule
- **User caught**: "Seems like we need to create the rule file"

**Lesson**: Distinguish "missing rule" from "violated rule" - create before enforcing

### Decision Framework

```
Discover guidance → Check .cursor/rules/
├─ Rule exists → Link to it, follow it
└─ Rule missing → PROPOSE creating it immediately
    ├─ Extract key guidance
    ├─ Set appropriate globs/triggers
    ├─ Make actionable (checklists, decision trees)
    └─ Get user approval before creating
```

## Rule Updates

**Add New Rules When:**

- A new technology/pattern is used in 3+ files
- Common bugs could be prevented by a rule
- Code reviews repeatedly mention the same feedback
- New security or performance patterns emerge
- **Guidance exists in project docs but not in rules/** (create rule to make it accessible)

**Modify Existing Rules When:**

- Better examples exist in the codebase
- Additional edge cases are discovered
- Related rules have been updated
- Implementation details have changed

## Example Pattern Recognition

```typescript
// If you see repeated patterns like:
const data = await prisma.user.findMany({
  select: { id: true, email: true },
  where: { status: "ACTIVE" },
});

// Consider proposing update to relevant rule:
// - Standard select fields
// - Common where conditions
// - Performance optimization patterns
```

## Rule Quality Checks

- Rules should be actionable and specific
- Examples should come from actual code
- References should be up to date
- Patterns should be consistently enforced

## Continuous Improvement

- Observe code patterns during normal work
- Track common development questions
- Note patterns after major refactors
- Identify links to relevant documentation
- Cross-reference related rules

### Process-Order Patterns

When user corrects the order of operations (e.g., "should document that first", "plan before implementing"):

1. **Immediate response**: Acknowledge and document the protocol/plan immediately
2. **Pattern recognition**: This signals missing guidance about process order
3. **Meta-observation**: Add to investigation findings if investigating process/rules
4. **Rule update consideration**: If pattern recurs (2+ instances), queue rule improvement

**Common process-order corrections**:

- "Document the test protocol first" → Document → then choose execution mode
- "Plan before implementing" → Create spec/plan → then implement
- "Define acceptance criteria first" → Write criteria → then build
- "Create test first" → Write failing test → then implement (TDD)

## Rule Deprecation

When patterns become outdated:

- Mark outdated patterns as deprecated in rules
- Remove rules that no longer apply
- Update references to deprecated rules
- Document migration paths for old patterns

## Documentation Updates

- Keep examples synchronized with code
- Update references to external docs
- Maintain links between related rules
- Document breaking changes

## Special Case: Rule Investigations

**For investigation-specific workflows**, see `investigation-workflow.mdc`:

- OUTPUT requirements for finding categorization
- Pre-file-creation checkpoints
- ACTIVE-MONITORING.md consultation protocol
- Pattern-aware prevention
- Meta-consistency requirements
- Solution creation checklist

## Related

- See [assistant-behavior.mdc](./assistant-behavior.mdc) for consent-first behavior and checkpoints
- See [rule-creation.mdc](./rule-creation.mdc) for rule writing guidelines
- See [rule-maintenance.mdc](./rule-maintenance.mdc) for pattern-driven update workflow
- See [rule-quality.mdc](./rule-quality.mdc) for validation standards
