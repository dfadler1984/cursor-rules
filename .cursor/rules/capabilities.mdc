---
description: Discoverable capabilities for the repo's AI assistant
alwaysApply: true
lastReviewed: 2025-10-24
healthScore:
  content: green # Accurate capability descriptions, canonical discovery schema
  usability: green # Clear list format, easy to scan, formalized truncation
  maintenance: green # Recently reviewed, canonical schema in Discovery section
---

## What you can ask the assistant to do

### Rules management

- Create new project rules (Always / Auto Attached / Agent Requested / Manual)
- Update existing rules with proper metadata and globs
- Validate rules (required front matter, healthScore, lastReviewed)
- Validate rules (required front matter, healthScore, lastReviewed; stale/refs checks; autofix)
- Suggest rule structure, scope, and examples

### Validation and automation

- Run `[.cursor/scripts/rules-validate.sh](.cursor/scripts/rules-validate.sh)` to check metadata
  - Flags: `--format json|text`, `--fail-on-missing-refs`, `--fail-on-stale`, `--autofix`, `--report`, `--report-out <path>`
- List rules and their metadata via `[.cursor/scripts/rules-list.sh](.cursor/scripts/rules-list.sh)`
- Validate rule attachments: `[.cursor/scripts/rules-attach-validate.sh](.cursor/scripts/rules-attach-validate.sh)`
- Validate ERD structure: `[.cursor/scripts/erd-validate.sh](.cursor/scripts/erd-validate.sh) <path>`
- Migrate ERD to YAML front matter: `[.cursor/scripts/erd-migrate-frontmatter.sh](.cursor/scripts/erd-migrate-frontmatter.sh) <erd-file> [--dry-run]`
- Add Mode line to ERD: `[.cursor/scripts/erd-add-mode-line.sh](.cursor/scripts/erd-add-mode-line.sh) <erd-file> [--mode lite|full] [--dry-run]`
- Fix empty ERD front matter: `[.cursor/scripts/erd-fix-empty-frontmatter.sh](.cursor/scripts/erd-fix-empty-frontmatter.sh) <erd-file> [--status STATUS] [--owner OWNER] [--dry-run]`
- Check capabilities sync: `[.cursor/scripts/capabilities-sync.sh](.cursor/scripts/capabilities-sync.sh) [--check|--update]`
- Deep validation and maintenance: `[.cursor/scripts/deep-rule-and-command-validate.sh](.cursor/scripts/deep-rule-and-command-validate.sh)`
  - Orchestrates multiple validators (rules, capabilities, shellcheck, help/error format, test colocation)
  - Performs cross-validation (rules → scripts, scripts → capabilities)
  - Calculates health scores by category (rules, scripts, docs, tests)
  - Flags: `--fix` (auto-repair), `--report` (JSON output), `--score-only`, `--fail-threshold N`
- Generate static SVG health badge: `[.cursor/scripts/health-badge-generate.sh](.cursor/scripts/health-badge-generate.sh)`
  - Generates static SVG badge from validation output
  - Color mapping: green (90-100), yellow (70-89), red (<70)
  - Flags: `--output <path>`, `--dry-run`, `--extract-score`, `--map-color <score>`
- Update repository health badge (shields.io): `[.cursor/scripts/repo-health-badge.sh](.cursor/scripts/repo-health-badge.sh)`
  - Runs deep validation and extracts health score
  - Generates shields.io badge URL with color mapping (red <70, yellow 70-89, green 90-100)
  - Updates README.md with badge markdown
  - Flags: `--dry-run`, `--workflow-url <url>`

**Rules-specific validators:**

- Autofix formatting issues: `[.cursor/scripts/rules-autofix.sh](.cursor/scripts/rules-autofix.sh) [--dry-run]`
- Validate format: `[.cursor/scripts/rules-validate-format.sh](.cursor/scripts/rules-validate-format.sh)`
- Validate frontmatter: `[.cursor/scripts/rules-validate-frontmatter.sh](.cursor/scripts/rules-validate-frontmatter.sh)`
- Validate cross-references: `[.cursor/scripts/rules-validate-refs.sh](.cursor/scripts/rules-validate-refs.sh)`
- Check for stale rules: `[.cursor/scripts/rules-validate-staleness.sh](.cursor/scripts/rules-validate-staleness.sh)`

**Intent routing validation:**

- Validate routing logic: `[.cursor/scripts/routing-validate.sh](.cursor/scripts/routing-validate.sh) [--format json|text] [--verbose]`
  - Validates intent routing logic against test suite
  - Reports pass/fail counts and accuracy
  - Proof-of-concept implementation (see `docs/projects/routing-optimization/phase3-full-validation.md` for complete validation)

### Engineering docs & planning

- Main rules (catalog):

  - `spec-driven.mdc`
  - `create-erd.mdc`
  - `generate-tasks-from-erd.mdc`
  - `project-lifecycle.mdc`
  - `testing.mdc`
  - `intent-routing.mdc`
  - `tdd-first.mdc`
  - `assistant-behavior.mdc`
  - `direct-answers.mdc`
  - `code-style.mdc`
  - `shell-unix-philosophy.mdc`
  - `refactoring.mdc`
  - `front-matter.mdc`
  - `rule-creation.mdc`
  - `rule-maintenance.mdc`
  - `rule-quality.mdc`
  - `capabilities.mdc`
  - `workspace-security.mdc`
  - `security.mdc`
  - `github-config-only.mdc`
  - `imports.mdc`

- Quick references (optional, when helpful):
  - `assistant-git-usage.caps.mdc`, `github-api-usage.caps.mdc`, `commands.caps.mdc`, `intent-routing.caps.mdc`, `tdd-first.caps.mdc`, `create-erd.caps.mdc`, `generate-tasks-from-erd.caps.mdc`, `project-lifecycle.caps.mdc`, `testing.caps.mdc`, optionally `direct-answers.caps.mdc`, `workspace-security.caps.mdc`.

### Git assistance

- Generate Conventional Commits via CLI: `[.cursor/scripts/git-commit.sh](.cursor/scripts/git-commit.sh) --type ... --description ...` (supports bodies, footers, breaking changes). See `assistant-git-usage.mdc`.
- Suggest branch names with validated types: `[.cursor/scripts/git-branch-name.sh](.cursor/scripts/git-branch-name.sh) --task ... [--type ...] [--feature ...] [--apply]`. See `assistant-git-usage.mdc`.
- Derive git context (owner, repo, branches): `[.cursor/scripts/git-context.sh](.cursor/scripts/git-context.sh) [--format text|json|eval]`
- Run commit gates locally when requested: use your repo's test/lint/typecheck scripts as configured.
- Create pull requests via shell (curl + GitHub API): `[.cursor/scripts/pr-create.sh](.cursor/scripts/pr-create.sh) --title "..." [--body "..."] [--base <branch>] [--head <branch>]`.
- Create pull requests (simplified wrapper): `[.cursor/scripts/pr-create-simple.sh](.cursor/scripts/pr-create-simple.sh) --title "..." [--body "..."]`
- Update pull requests: `[.cursor/scripts/pr-update.sh](.cursor/scripts/pr-update.sh) --pr <number>|--head <branch> [--title "..."] [--body "..."]`.
- Manage PR labels: `[.cursor/scripts/pr-labels.sh](.cursor/scripts/pr-labels.sh) --pr <number> --add|--remove|--list|--has <label>`
- Add single PR label: `[.cursor/scripts/pr-label.sh](.cursor/scripts/pr-label.sh) --pr <number> --add <label>`
- Sync PR with changeset state: `[.cursor/scripts/pr-changeset-sync.sh](.cursor/scripts/pr-changeset-sync.sh) --pr <number>`
- Check PR status: `[.cursor/scripts/checks-status.sh](.cursor/scripts/checks-status.sh) --pr <number> [--wait] [--timeout <seconds>]`.
- Dispatch changesets auto-merge: `[.cursor/scripts/changesets-automerge-dispatch.sh](.cursor/scripts/changesets-automerge-dispatch.sh) --pr <number>`.

### Intent routing & user intent

- Explain and apply routing per `intent-routing.mdc` and `user-intent.mdc` (triggers, signals, consent-after-plan, minimal rule attachment).
- Enforce the JS/TS pre-edit TDD gate and scope-check protocol when implementation intent is detected.

### Loop/Deadlock safeguards

- Apply one-shot consent rules for verification/tool use (`assistant-behavior.mdc`).
- Apply one-shot consent when a new owner spec must be created (`tdd-first.mdc`).
- Pause when ambiguity persists after one clarifying question (`intent-routing.mdc`).
- Add or refine mitigations in `rule-maintenance.mdc` under “Looping/Deadlock Mitigations”.

- Read-only consent exception: execute obvious, safe read-only commands without an extra prompt; announce the exact command before running.
- High-certainty suggestions: propose adding similar read-only commands to the session allowlist with a one-line confirmation when intent is clear.

### Rules automation

- Generate/normalize rule front matter: use your local script if present.
- (See also: `.cursor/scripts/rules-list.sh`, `.cursor/scripts/rules-validate.sh`).

### Discovery (rules, MCP, local scripts)

- Ask: `@capabilities` or "What can you do?"
- Output: grouped bullets by source (rules|mcp|local), truncated with "N more…" when long
- Safety: read-only listing; never echo secrets; execution remains consent-gated

**Sources:**

- Rules: scan `.cursor/rules/*.mdc` for names/descriptions
- MCP: list configured servers/tools/resources and auth state
- Local: scan `.cursor/scripts/**/*.sh` top comments for descriptions

**Discovery Schema (canonical):**

All discovery outputs MUST conform to this schema:

```json
{
  "name": "string",
  "source": "rules|mcp|local",
  "summary": "string",
  "authRequired": boolean,
  "enabled": boolean,
  "notes": "string?"
}
```

**Truncation:** Show first 10 items per source; if >10, show "... and N more <source> items"  
**Grouping:** Always group by source (Rules → MCP → Local)  
**Secrets:** Never echo token values, API keys, or credentials in discovery output

### Testing & TDD

- Author or adjust Jest specs following `testing.mdc` (structure, naming, quality).
- Enforce TDD cycle: add failing spec → implement minimal change → run focused tests (`yarn test path -t "name"`) → refactor. See `tdd-first.mdc`.
- Check TDD scope for a file: `[.cursor/scripts/tdd-scope-check.sh](.cursor/scripts/tdd-scope-check.sh) <file>` (exit 0 = TDD required, exit 1 = exempt).
- Migrate tests to colocation: `[.cursor/scripts/test-colocation-migrate.sh](.cursor/scripts/test-colocation-migrate.sh)`.
- Validate test colocation: `[.cursor/scripts/test-colocation-validate.sh](.cursor/scripts/test-colocation-validate.sh)`.

### Shell Scripts & Unix Philosophy

- Enforce Unix Philosophy principles for shell scripts (see `shell-unix-philosophy.mdc`):
  - Single responsibility (do one thing well)
  - Size targets: < 150 lines (warn at 200, fail at 300)
  - Flag limits: ≤ 6-8 flags (warn at 10+)
  - Composition: results → stdout, logs → stderr
  - Policy/mechanism separation
- Validate shell scripts: `[.cursor/scripts/help-validate.sh](.cursor/scripts/help-validate.sh)`, `[.cursor/scripts/error-validate.sh](.cursor/scripts/error-validate.sh)`, `[.cursor/scripts/network-guard.sh](.cursor/scripts/network-guard.sh)`
- Run ShellCheck: `[.cursor/scripts/shellcheck-run.sh](.cursor/scripts/shellcheck-run.sh)`
- Propose splits when scripts exceed thresholds (e.g., > 200 lines, 10+ flags, multiple responsibilities)

### Imports & formatting

- Organize imports per `imports.mdc` (grouping, alphabetization, type-only imports) and keep modules side-effect free by default.

### Security & workspace policy

- Audit Cursor workspace trust and autoruns: check `.vscode/tasks.json` for `runOn: "folderOpen"`, advise removal; prefer manual runs. See `workspace-security.mdc`.
- Run security scan: `yarn security:scan`.

### Project lifecycle & archival

**Project Creation:**

- Create new project: `[.cursor/scripts/project-create.sh](.cursor/scripts/project-create.sh) --name <slug> [--mode full|lite] [--owner <owner>]` — Creates project directory with ERD, tasks, and README from templates.

**Project Status & Coordination:**

- Query project status: `[.cursor/scripts/project-status.sh](.cursor/scripts/project-status.sh) <slug> [--format json|text]` — Shows status, task completion %, and suggested next action.
- Complete project: `[.cursor/scripts/project-complete.sh](.cursor/scripts/project-complete.sh) <slug> [--force] [--dry-run]` — Orchestrates completion workflow (validate → summary → status update).

**Archival & Summaries:**

- **Archive with readiness checks** (recommended): `[.cursor/scripts/project-archive-ready.sh](.cursor/scripts/project-archive-ready.sh) --project <slug> --year <YYYY> [--dry-run] [--auto-fix]`
  - Validates project readiness before archival
  - Auto-fixes common issues (missing final-summary.md, Carryovers section)
  - Runs full archival workflow only when validation passes
  - Fixes broken links after archival
  - Interactive or non-interactive modes available
- Generate final summaries: `[.cursor/scripts/final-summary-generate.sh](.cursor/scripts/final-summary-generate.sh) --project <slug> --year <YYYY> [--force] [--pre-move]`.
- Archive projects (full workflow): `[.cursor/scripts/project-archive-workflow.sh](.cursor/scripts/project-archive-workflow.sh) --project <slug> --year <YYYY> [--dry-run]`.
- Archive single project: `[.cursor/scripts/project-archive.sh](.cursor/scripts/project-archive.sh) --project <slug> --year <YYYY>`.
- Detect completed projects: `[.cursor/scripts/archive-detect-complete.sh](.cursor/scripts/archive-detect-complete.sh) [--projects-dir DIR]` — Returns JSON array of projects ready for archival
- Fix broken links after archival: `[.cursor/scripts/archive-fix-links.sh](.cursor/scripts/archive-fix-links.sh) --old-path PATH --new-path PATH [--search-dir DIR] [--dry-run]`
- Generate projects README: `[.cursor/scripts/generate-projects-readme.sh](.cursor/scripts/generate-projects-readme.sh) [--projects-dir DIR] [--out FILE] [--dry-run]`

**Validation:**

- Backfill lifecycle artifacts: `[.cursor/scripts/project-lifecycle-migrate.sh](.cursor/scripts/project-lifecycle-migrate.sh) --project <slug>`.
- Validate project lifecycle: `[.cursor/scripts/project-lifecycle-validate.sh](.cursor/scripts/project-lifecycle-validate.sh)`.
- Validate scoped project: `[.cursor/scripts/project-lifecycle-validate-scoped.sh](.cursor/scripts/project-lifecycle-validate-scoped.sh) <slug>`.
- Validate all completed projects: `[.cursor/scripts/project-lifecycle-validate-sweep.sh](.cursor/scripts/project-lifecycle-validate-sweep.sh)`.
- Validate artifacts: `[.cursor/scripts/validate-artifacts.sh](.cursor/scripts/validate-artifacts.sh) [--erd-path <path>] [--tasks-path <path>]`.
- Template filling: `[.cursor/scripts/template-fill.sh](.cursor/scripts/template-fill.sh) --template <name> --var KEY=VALUE...`.

### Compliance & quality measurement

- Check branch naming compliance: `[.cursor/scripts/check-branch-names.sh](.cursor/scripts/check-branch-names.sh)`
- Check script usage patterns: `[.cursor/scripts/check-script-usage.sh](.cursor/scripts/check-script-usage.sh)`
- Check TDD compliance: `[.cursor/scripts/check-tdd-compliance.sh](.cursor/scripts/check-tdd-compliance.sh)`
- Generate compliance dashboard: `[.cursor/scripts/compliance-dashboard.sh](.cursor/scripts/compliance-dashboard.sh)`

### Context efficiency

- Compute context efficiency score: `[.cursor/scripts/context-efficiency-score.sh](.cursor/scripts/context-efficiency-score.sh) [--scope-concrete true|false] [--rules-count N] [--clarification-loops N] [--user-issues "text"]`
- Format context efficiency data: `[.cursor/scripts/context-efficiency-format.sh](.cursor/scripts/context-efficiency-format.sh) --score N --signals "text" [--format line|json|markdown]`
- Orchestrate efficiency gauge: `[.cursor/scripts/context-efficiency-gauge.sh](.cursor/scripts/context-efficiency-gauge.sh) [OPTIONS]` — Combines score computation and formatting

### CI/tooling assistance

- Lint GitHub workflows: `[.cursor/scripts/lint-workflows.sh](.cursor/scripts/lint-workflows.sh)`.
- Run security scan: `[.cursor/scripts/security-scan.sh](.cursor/scripts/security-scan.sh)`.
- Run config preflight checks: `[.cursor/scripts/preflight.sh](.cursor/scripts/preflight.sh)`.
- Check broken links: `[.cursor/scripts/links-check.sh](.cursor/scripts/links-check.sh) [--path <dir>]`.
- Tooling inventory: `[.cursor/scripts/tooling-inventory.sh](.cursor/scripts/tooling-inventory.sh)`.

### Documentation & README Generation

- Generate root README: `[.cursor/scripts/generate-root-readme.sh](.cursor/scripts/generate-root-readme.sh) [--template PATH] [--out PATH] [--dry-run]` — Generate repository root README.md from template with auto-generated sections
- Validate root README: `[.cursor/scripts/validate-root-readme.sh](.cursor/scripts/validate-root-readme.sh) [--fix] [--dry-run]` — Validate README.md freshness and optionally regenerate if stale

### Utilities

- Organize project documentation: `[.cursor/scripts/project-docs-organize.sh](.cursor/scripts/project-docs-organize.sh) <project-slug>`
- Setup git remote: `[.cursor/scripts/setup-remote.sh](.cursor/scripts/setup-remote.sh) [--remote <name>] [--url <url>]`
- Validate investigation structure: `[.cursor/scripts/validate-investigation-structure.sh](.cursor/scripts/validate-investigation-structure.sh) <project-path>`

### Validation gates & helpers

- Validate PR titles locally: use local commit message policy via `.cursor/scripts/git-commit.sh`.
- Enforce spec-diff in CI if configured.
- Run related tests pre-commit: use your repo's test runner configuration.
- Validate branch name pre-push: via hooks guided by `.cursor/scripts/git-branch-name.sh`.

### How to invoke

- Reference this rule: `@capabilities`
- Ask directly in chat: “What can you do here?” or “List available tasks.”

### Script libraries & helpers

- Shared library: `[.cursor/scripts/.lib.sh](.cursor/scripts/.lib.sh)` — Common helpers sourced by other scripts
- Test network library: `[.cursor/scripts/.lib-net.sh](.cursor/scripts/.lib-net.sh)` — Network fixtures and guards for testing (test files only)
- Test/validation helpers:
  - `[.cursor/scripts/rules-validate.spec.sh](.cursor/scripts/rules-validate.spec.sh)` — Spec helper for rules validation tests
  - `[.cursor/scripts/validate-artifacts-smoke.sh](.cursor/scripts/validate-artifacts-smoke.sh)` — Smoke test for artifact validation
  - `[.cursor/scripts/validate-project-lifecycle.sh](.cursor/scripts/validate-project-lifecycle.sh)` — Project lifecycle validation helper

### Adding new capabilities

- Add new sections here describing new tasks as they're implemented
- Keep entries short and action-oriented
- Run `capabilities-sync.sh --check` to ensure all scripts are documented

### Platform reference

- For product/platform features and constraints, see `@platform-capabilities`.
