---
description: Discoverable capabilities for the repo's AI assistant
alwaysApply: false
lastReviewed: 2025-10-10
healthScore:
  content: green # Accurate capability descriptions
  usability: green # Clear list format, easy to scan
  maintenance: green # Recently reviewed, current features
---

## What you can ask the assistant to do

### Rules management

- Create new project rules (Always / Auto Attached / Agent Requested / Manual)
- Update existing rules with proper metadata and globs
- Validate rules (required front matter, healthScore, lastReviewed)
- Validate rules (required front matter, healthScore, lastReviewed; stale/refs checks; autofix)
- Suggest rule structure, scope, and examples

### Validation and automation

- Run `[.cursor/scripts/rules-validate.sh](.cursor/scripts/rules-validate.sh)` to check metadata
  - Flags: `--format json|text`, `--fail-on-missing-refs`, `--fail-on-stale`, `--autofix`, `--report`, `--report-out <path>`
- List rules and their metadata via `[.cursor/scripts/rules-list.sh](.cursor/scripts/rules-list.sh)`

### Engineering docs & planning

- Main rules (catalog):

  - `spec-driven.mdc`
  - `create-erd.mdc`
  - `generate-tasks-from-erd.mdc`
  - `project-lifecycle.mdc`
  - `testing.mdc`
  - `intent-routing.mdc`
  - `tdd-first.mdc`
  - `assistant-behavior.mdc`
  - `direct-answers.mdc`
  - `code-style.mdc`
  - `refactoring.mdc`
  - `front-matter.mdc`
  - `rule-creation.mdc`
  - `rule-maintenance.mdc`
  - `rule-quality.mdc`
  - `capabilities.mdc`
  - `workspace-security.mdc`
  - `security.mdc`
  - `github-config-only.mdc`
  - `imports.mdc`

- Quick references (optional, when helpful):
  - `assistant-git-usage.caps.mdc`, `github-api-usage.caps.mdc`, `commands.caps.mdc`, `intent-routing.caps.mdc`, `tdd-first.caps.mdc`, `create-erd.caps.mdc`, `generate-tasks-from-erd.caps.mdc`, `project-lifecycle.caps.mdc`, `testing.caps.mdc`, optionally `direct-answers.caps.mdc`, `workspace-security.caps.mdc`.

### Git assistance

- Generate Conventional Commits via CLI: `[.cursor/scripts/git-commit.sh](.cursor/scripts/git-commit.sh) --type ... --description ...` (supports bodies, footers, breaking changes). See `assistant-git-usage.mdc`.
- Suggest branch names with validated types: `[.cursor/scripts/git-branch-name.sh](.cursor/scripts/git-branch-name.sh) --task ... [--type ...] [--feature ...] [--apply]`. See `assistant-git-usage.mdc`.
- Run commit gates locally when requested: use your repo's test/lint/typecheck scripts as configured.
- Create pull requests via shell (curl + GitHub API): `[.cursor/scripts/pr-create.sh](.cursor/scripts/pr-create.sh) --title "..." [--body "..."] [--base <branch>] [--head <branch>]`.

### Intent routing & user intent

- Explain and apply routing per `intent-routing.mdc` and `user-intent.mdc` (triggers, signals, consent-after-plan, minimal rule attachment).
- Enforce the JS/TS pre-edit TDD gate and scope-check protocol when implementation intent is detected.

### Loop/Deadlock safeguards

- Apply one-shot consent rules for verification/tool use (`assistant-behavior.mdc`).
- Apply one-shot consent when a new owner spec must be created (`tdd-first.mdc`).
- Pause when ambiguity persists after one clarifying question (`intent-routing.mdc`).
- Add or refine mitigations in `rule-maintenance.mdc` under “Looping/Deadlock Mitigations”.

- Read-only consent exception: execute obvious, safe read-only commands without an extra prompt; announce the exact command before running.
- High-certainty suggestions: propose adding similar read-only commands to the session allowlist with a one-line confirmation when intent is clear.

### Rules automation

- Generate/normalize rule front matter: use your local script if present.
- (See also: `.cursor/scripts/rules-list.sh`, `.cursor/scripts/rules-validate.sh`).

### Discovery (rules, MCP, local scripts)

- Ask: `@capabilities` or “What can you do?”
- Output: grouped bullets by source (rules|mcp|local), truncated with “N more…” when long
- Safety: read-only listing; never echo secrets; execution remains consent-gated
- Sources:
  - Rules: scan `.cursor/rules/*.mdc` for names/descriptions
  - MCP: list configured servers/tools/resources and auth state
  - Local: scan `.cursor/scripts/**/*.sh` top comments for descriptions

### Testing & TDD

- Author or adjust Jest specs following `testing.mdc` (structure, naming, quality).
- Enforce TDD cycle: add failing spec → implement minimal change → run focused tests (`yarn test path -t "name"`) → refactor. See `tdd-first.mdc`.

### Imports & formatting

- Organize imports per `imports.mdc` (grouping, alphabetization, type-only imports) and keep modules side-effect free by default.

### Security & workspace policy

- Audit Cursor workspace trust and autoruns: check `.vscode/tasks.json` for `runOn: "folderOpen"`, advise removal; prefer manual runs. See `workspace-security.mdc`.
- Run security scan: `yarn security:scan`.

### CI/tooling assistance

- Lint GitHub workflows: `.cursor/scripts/lint-workflows.sh`.
- Install Actionlint locally when needed.
- Run config preflight checks: `.cursor/scripts/preflight.sh`.

### Validation gates & helpers

- Validate PR titles locally: use local commit message policy via `.cursor/scripts/git-commit.sh`.
- Enforce spec-diff in CI if configured.
- Run related tests pre-commit: use your repo's test runner configuration.
- Validate branch name pre-push: via hooks guided by `.cursor/scripts/git-branch-name.sh`.

### How to invoke

- Reference this rule: `@capabilities`
- Ask directly in chat: “What can you do here?” or “List available tasks.”

### Adding new capabilities

- Add new sections here describing new tasks as they’re implemented
- Keep entries short and action-oriented

### Platform reference

- For Cursor platform features and constraints, see `@cursor-platform-capabilities`.
