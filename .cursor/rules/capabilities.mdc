---
description: Discoverable capabilities for the repo's AI assistant
alwaysApply: false
lastReviewed: 2025-10-06
healthScore:
  content: green # Accurate capability descriptions
  usability: green # Clear list format, easy to scan
  maintenance: green # Recently reviewed, current features
---

## What you can ask the assistant to do

### Rules management

- Create new project rules (Always / Auto Attached / Agent Requested / Manual)
- Update existing rules with proper metadata and globs
- Validate rules (required front matter, healthScore, lastReviewed)
- Suggest rule structure, scope, and examples

### Validation and automation

- Run `.cursor/scripts/rules-validate.sh` to check metadata
- List rules and their metadata via `.cursor/scripts/rules-list.sh`

### Engineering docs & planning

- See per‑rule capabilities for details:
  - `spec-driven.caps.mdc`
  - `create-erd.caps.mdc`
  - `generate-tasks-from-erd.caps.mdc`
  - `task-list-process.caps.mdc`
  - `logging-protocol.caps.mdc`
  - `commands.caps.mdc`
  - `assistant-git-usage.caps.mdc`
  - `tdd-first.caps.mdc`
  - `intent-routing.caps.mdc`
  - `assistant-behavior.caps.mdc`
  - `favor-tooling.caps.mdc`
  - `scope-check.caps.mdc`
  - `testing.caps.mdc`
  - `testing-structure.caps.mdc`
  - `testing-naming.caps.mdc`
  - `test-quality.caps.mdc`
  - `refactoring.caps.mdc`
  - `project-lifecycle.caps.mdc`
  - `imports.caps.mdc`
  - `workspace-security.caps.mdc`
  - `security.caps.mdc`
  - `github-api-usage.caps.mdc`
  - `00-assistant-laws.caps.mdc`
  - `capabilities-discovery.caps.mdc`
  - `code-style.caps.mdc`
  - `critical-thinking.caps.mdc`
  - `direct-answers.caps.mdc`
  - `dry-run.caps.mdc`
  - `deterministic-outputs.caps.mdc`
  - `dependencies.caps.mdc`
  - `rule-creation.caps.mdc`
  - `rule-maintenance.caps.mdc`
  - `rule-quality.caps.mdc`
  - `front-matter.caps.mdc`
  - `guidance-first.caps.mdc`
  - `github-config-only.caps.mdc`

### Git assistance

- Generate Conventional Commits via CLI: `.cursor/scripts/git-commit.sh --type ... --description ...` (supports bodies, footers, breaking changes). See `assistant-git-usage.mdc`.
- Suggest branch names with validated types: `.cursor/scripts/git-branch-name.sh --task ... [--type ...] [--feature ...] [--apply]`. See `assistant-git-usage.mdc`.
- Run commit gates locally when requested: use your repo's test/lint/typecheck scripts as configured.
- Create pull requests via shell (curl + GitHub API): `.cursor/scripts/pr-create.sh --title "..." [--body "..."] [--base <branch>] [--head <branch>]`.

### Intent routing & user intent

- Explain and apply routing per `intent-routing.mdc` and `user-intent.mdc` (triggers, signals, consent-after-plan, minimal rule attachment).
- Enforce the JS/TS pre-edit TDD gate and scope-check protocol when implementation intent is detected.

### Loop/Deadlock safeguards

- Apply one-shot consent rules for verification/tool use (`assistant-behavior.mdc`).
- Apply one-shot consent when a new owner spec must be created (`tdd-first.mdc`).
- Pause when ambiguity persists after one clarifying question (`intent-routing.mdc`).
- Add or refine mitigations in `rule-maintenance.mdc` under “Looping/Deadlock Mitigations”.

- Read-only consent exception: execute obvious, safe read-only commands without an extra prompt; announce the exact command before running.
- High-certainty suggestions: propose adding similar read-only commands to the session allowlist with a one-line confirmation when intent is clear.

### Rules automation

- Generate/normalize rule front matter: use your local script if present.
- (See also: `.cursor/scripts/rules-list.sh`, `.cursor/scripts/rules-validate.sh`).

### Testing & TDD

- Author or adjust Jest specs following `testing-naming.mdc` and `testing-structure.mdc`.
- Enforce TDD cycle: add failing spec → implement minimal change → run focused tests (`yarn test path -t "name"`) → refactor. See `tdd-first.mdc`.

### Imports & formatting

- Organize imports per `imports.mdc` (grouping, alphabetization, type-only imports) and keep modules side-effect free by default.

### Security & workspace policy

- Audit Cursor workspace trust and autoruns: check `.vscode/tasks.json` for `runOn: "folderOpen"`, advise removal; prefer manual runs. See `workspace-security.mdc`.
- Run security scan: `yarn security:scan`.

### CI/tooling assistance

- Lint GitHub workflows: `.cursor/scripts/lint-workflows.sh`.
- Install Actionlint locally when needed.
- Run config preflight checks: `.cursor/scripts/preflight.sh`.

### Validation gates & helpers

- Validate PR titles locally: use local commit message policy via `.cursor/scripts/git-commit.sh`.
- Enforce spec-diff in CI if configured.
- Run related tests pre-commit: use your repo's test runner configuration.
- Validate branch name pre-push: via hooks guided by `.cursor/scripts/git-branch-name.sh`.

### How to invoke

- Reference this rule: `@capabilities`
- Ask directly in chat: “What can you do here?” or “List available tasks.”

### Adding new capabilities

- Add new sections here describing new tasks as they’re implemented
- Keep entries short and action-oriented

### Platform reference

- For Cursor platform features and constraints, see `@cursor-platform-capabilities`.
