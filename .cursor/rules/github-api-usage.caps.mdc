---
description: Capabilities for GitHub API automation (PR creation via script)
lastReviewed: 2025-10-04
healthScore:
  content: green
  usability: green
  maintenance: green
references:
  - github-api-usage.mdc
---

## Capabilities

- Create PRs via `.cursor/scripts/pr-create.sh` using curl and environment token
- Provide troubleshooting (token scopes, SSO approval, base/head refs)

## Triggers & Routing

- When asked to open a PR or generate a compare URL

## Inputs â†’ Outputs

- Inputs: title, body, base, head, owner/repo (auto-detected when possible)
- Outputs: PR created or compare URL; logs with redaction

### PR Description (must)

- Provide a complete PR body (Summary, Changes, Why, Acceptance & Validation, Risk & Rollout). Avoid placeholder sections.
- When supplying a full body, use `--replace-body` to bypass templates and set the body exactly.
- For existing PRs, use `.cursor/scripts/pr-update.sh --pr <number> --body <text>` to replace the body.

### Template Injection (Default)

- By default, PRs created via `.cursor/scripts/pr-create.sh` are prefilled from:
  1. `.github/pull_request_template.md` if present, else
  2. the first file under `.github/PULL_REQUEST_TEMPLATE/` (sorted by name).
- The provided `--body` is appended under a `## Context` section when template injection is active.
- Flags:
  - `--no-template`: disable template injection
  - `--template <path>`: use a specific template file
  - `--body-append <text>`: append additional context under `## Context`
  - `--replace-body`: bypass template and set body exactly to provided content

## Constraints & Guards

- Redact tokens; prefer dry-run when demonstrating
- Keep `.github/` config-only; avoid feature-specific templates in the default path

## Examples

- ".cursor/scripts/pr-create.sh --title 'feat: AI workflow' --base main --head user/feat-ai-workflow"

## Related

- assistant-git-usage.caps.mdc
