---
description: Practical test-quality (language-agnostic core: owner coupling, meaningful failure, sabotage checks)
globs: **/*.spec*,**/*.test*
alwaysApply: false
lastReviewed: 2025-10-06
healthScore:
  content: green
  usability: green
  maintenance: green
---

> Canonical sources: Core quality bar lives here. JS/TS specifics live in `test-quality-js.mdc`; Shell specifics live in `test-quality-sh.mdc`. Methodology lives in `tdd-first.mdc`.

## Purpose

Keep tests meaningful and resistant to false positives with minimal friction. Pair objective execution signals with good structure.

## Core signals (must)

- Owner coupling:
  - A spec should import/invoke its owner module (sibling path) or an extracted pure resolver.
- Meaningful failure:
  - Tests must assert observable behavior of the SUTâ€™s public API (values, outputs, effects), not incidental internals or placeholders.
- Sabotage spot-check (review practice):
  - Temporarily comment out or early-return in the SUT and re-run related tests; they should fail. Revert immediately.

## Structure & effects seam

- Prefer pure resolvers; inject effects (env, filesystem, subprocess, time) as parameters. See `tdd-first.mdc` for methodology.
- Boundary tests: assert parsing/shape, exit codes, and user-visible outputs through seams/spies.

## Linting aids (should)

- Enable test lint rules where available (e.g., expect-expect, no-disabled-tests, no-identical-title).
- Optional denylist in CI to catch obvious placeholders: `expect(true).toBe(true)`, `.skip(`, or "placeholder" in titles.

## Language extensions

- JS/TS specifics (coverage options, commands): `test-quality-js.mdc`, `tdd-first-js.mdc`
- Shell specifics (harness, behavior evidence): `test-quality-sh.mdc`, `tdd-first-sh.mdc`

## Related

- See `testing.mdc`, `testing-structure.mdc`, `testing-naming.mdc`, `tdd-first.mdc`
