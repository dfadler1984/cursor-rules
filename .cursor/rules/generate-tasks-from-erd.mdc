---
description: Generate a step-by-step, junior-friendly tasks document from an ERD
alwaysApply: false
lastReviewed: 2025-10-15
healthScore:
  content: green
  usability: green
  maintenance: green
---

# Rule: Generating a Task List from an ERD

## Goal

Guide the assistant to create a clear, junior-friendly, step-by-step task list in Markdown from an Engineering Requirements Document (ERD), aligned with a TDD-first workflow and structure.

**Scope**: tasks.md is execution tracking ONLY — phase sections with checkboxes, nothing else.

## Output

- Format: Markdown (.md)
- Location: `docs/projects/<feature>/`
- Filename: `tasks.md` (colocated with `erd.md`)

## Process

1. Receive ERD Reference: The user points to a specific ERD file (prefer `docs/projects/<feature>/erd.md`).
2. Analyze ERD: Read and analyze the functional requirements, user stories, constraints, and success criteria.
3. Assess Current State: Review the codebase to understand existing infrastructure, conventions, and reusable modules across relevant backend and frontend areas.
4. Phase 1: Generate Parent Tasks
   - Create `docs/projects/<feature>/tasks.md` next to the ERD.
   - Draft 4–8 high-level parent tasks required to implement the feature end to end.
   - Inform the user: Present only the parent tasks in chat. Say: "I have generated the high-level tasks based on the ERD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
5. Wait for Confirmation: Pause until the user replies "Go".
6. Phase 2: Generate Sub-Tasks
   - For each parent task, add smaller, actionable sub-tasks necessary to complete the parent task.
   - Keep TDD-first: add or adjust a failing spec before implementation; then implement; then refactor while tests stay green.
   - **All tasks are mandatory by default** — do not mark any tasks as "optional" or "deferred" unless the engineer explicitly requests it.
7. Identify Relevant Files
   - List potential files to create or modify, including corresponding test files.
8. Generate Final Output
   - Combine parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
9. Save Task List
   - Save to `docs/projects/<feature>/tasks.md`.

## Converting ERD Acceptance Criteria to Tasks

**ERD Acceptance Criteria** (narrative requirements):

- Describe what success looks like
- Explain thresholds, targets, and rationale
- Stay in ERD as stable requirements

**tasks.md Checklists** (executable tracking):

- One checkbox per deliverable or verification step
- Derived from ERD criteria but in execution format
- Updated frequently as work progresses

**Example Transformation**:

**From ERD** (Acceptance Criteria section):

```markdown
## 5. Acceptance Criteria

1. **Measurement Framework**: Create tools to measure script usage, TDD compliance,
   and branch naming. Each tool must output compliance rates, accept a --limit
   parameter, and exit with appropriate codes for CI integration.
```

**To tasks.md** (Phase checklist):

```markdown
## Phase 4: Measurement & Validation

- [ ] 4.0 Create compliance measurement tools
  - [ ] 4.1 Build check-script-usage.sh
  - [ ] 4.2 Build check-tdd-compliance.sh
  - [ ] 4.3 Build check-branch-names.sh
  - [ ] 4.4 Build compliance-dashboard.sh
  - [ ] 4.5 Add --limit parameter to all tools
  - [ ] 4.6 Add exit codes for CI
  - [ ] 4.7 TDD-test all scripts
```

**Key**: ERD says "what" (requirements); tasks.md says "do step X, Y, Z" (execution)

## What NOT to Include in tasks.md

**Prohibited Content** (put in other documents):

**❌ Findings or Outcomes** → `findings.md`

```markdown
# Don't do this in tasks.md:

- [x] Build measurement framework
  - Results: Achieved 95% accuracy (baseline was 70%)
  - Discovery: Found 3 edge cases not in original spec
```

**❌ Questions or Discussion** → `erd.md` Risks section or separate discussion doc

```markdown
# Don't do this in tasks.md:

- [ ] Implement feature X
  - Open questions: Should we use approach A or B?
  - Need to discuss: Performance trade-offs
```

**❌ Success Criteria or Metrics** → `erd.md` Acceptance Criteria section

```markdown
# Don't do this in tasks.md:

- [x] Phase 1 Complete
  - Success criteria: All tests passing, coverage >80%, no regressions
  - Metrics: 47 tests, 92% coverage, 0 failures
```

**❌ Retrospective or Lessons** → `findings.md`

```markdown
# Don't do this in tasks.md:

- [x] Complete implementation
  - What went well: TDD caught 5 bugs early
  - What to improve: Better planning for dependencies
```

**❌ Status Updates or Progress Notes** → `README.md` or comments

```markdown
# Don't do this in tasks.md:

- [x] Build API client
  - Update 2025-10-15: Finished core, working on error handling
  - Blocked by: Waiting for API key from ops team
```

**Why Strict Separation**:

- Keeps tasks.md scannable (200 lines max)
- Clear completion signal (all boxes checked = done)
- Prevents content duplication
- Each document has single, clear purpose

**Evidence**: The rules-enforcement-investigation project's tasks.md grew to 333 lines with 152 lines of non-task content (findings, questions, metrics, status updates).

## Output Format

```markdown
## Relevant Files

- `path/to/potential/file1.ts`
  - Brief description (e.g., Main module for this feature's domain logic).
- `path/to/file1.spec.ts`
  - Unit tests for `file1.ts`.
- `components/FeatureView.tsx`
  - UI component for the feature's primary view.
- `components/FeatureView.spec.tsx`
  - Unit tests for `FeatureView.tsx`.

### Notes

- Tests run with `yarn test [optional/path/to/spec]`. Running without a path executes all tests configured in Jest.
- TDD-first: start by writing/adjusting a failing spec, then implement to pass, then refactor.

## Task Optionality Policy (must)

**Default**: All generated tasks are mandatory and must be completed before marking the project complete.

**Only the engineer may mark tasks as optional**:

- Explicit labels: "optional", "deferred", "nice-to-have", or "carryover"
- Only after the engineer reviews and approves moving work to future phases

**Assistant behavior**:

- Do NOT independently decide tasks are optional
- Do NOT defer core deliverables to declare a project complete
- Before marking complete: ask engineer which unchecked tasks can become carryovers
- Carryovers = follow-up work for new projects, NOT shortcuts to completion

**Completion Blocking Rule (must)**:

**A project CANNOT be marked complete if `tasks.md` contains unchecked tasks** unless:

1. The engineer explicitly approves moving those specific tasks to Carryovers
2. The approval is documented (e.g., "Approved by [engineer] on [date]")

If the assistant attempts to mark a project complete with unchecked tasks, it must:

1. Stop and list all unchecked tasks
2. Ask: "These tasks remain unchecked. Complete them now, or approve moving to Carryovers?"
3. Wait for explicit approval before proceeding

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 Sub-task description 1.1
  - [ ] 1.2 Sub-task description 1.2
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 Sub-task description 2.1
- [ ] 3.0 Parent Task Title (may not require sub-tasks if structural/config)
```

## Interaction Model

- Phase 1: Output only the parent tasks and the intended `docs/projects/<feature>/tasks.md` file path. Wait for the user to reply “Go.”
- Phase 2: After “Go,” output the sub-tasks and the `Relevant Files` section; then save the final document.

## Target Audience

- Primary reader is a junior developer who will implement the feature within the target repository’s conventions and TDD-first expectations.

## Notes

- Prefer reusing existing utilities/components over creating new ones.
- Keep implementation details concise and test-led; avoid speculative sub-tasks not required by the ERD.
- When `dependencies` are present, propose next tasks only from those whose dependencies are all satisfied; among ready tasks, prefer highest `priority`.
- Fields:
  - `dependencies: [<task ids>]` to indicate prerequisite tasks
  - `priority: high|medium|low` to guide next-task selection
  - `[P]` prefix to signal a task or group is parallelizable

## Inspiration

- Inspired by: `https://raw.githubusercontent.com/snarktank/ai-dev-tasks/refs/heads/main/generate-tasks.md`
