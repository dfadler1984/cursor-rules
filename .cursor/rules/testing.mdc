---
description: Testing conventions — meaningful assertions against owner modules; pointers to TDD cycles
globs: **/*.spec*,**/*.test*
alwaysApply: false
lastReviewed: 2025-10-05
healthScore:
  content: green     # Accurate testing conventions
  usability: green   # Clear structure, good examples
  maintenance: green # Recently reviewed, current standards
---

# Testing Overview

- This overview anchors testing conventions and links to focused rules.

## Naming Conventions

- See `testing-naming.mdc` for file naming and test API preferences.

## Structure & Style

- See `testing-structure.mdc` for behavior-focused titles and test layout.

## Notes

- Jest config already supports `.spec` and `.test` via `testMatch`.
- Prefer incremental migration: rename when touching a file or alongside nearby changes.

## Environment variables (must)

- Snapshot/restore `process.env` in specs that modify tokens or other env vars:
  - At top of `describe`: `const ORIGINAL_ENV: NodeJS.ProcessEnv = { ...process.env };`
  - `beforeEach`: `process.env = { ...ORIGINAL_ENV };`
  - `afterAll`: `process.env = ORIGINAL_ENV;`
- Prefer wrappers over mutation: expose a `getGithubToken()` helper in the module under test and mock it in specs instead of deleting `process.env.GITHUB_TOKEN`/`GH_TOKEN`.
- If you must simulate missing tokens, delete only within the test and restore immediately after, never globally.

## No placeholders (must)

- See `test-quality.mdc` for the canonical guidance on meaningful assertions, forbidden placeholders, and observable behavior requirements.

### Examples (good)

```ts
// Owner: src/validateGlobs.ts → src/validateGlobs.spec.ts
it("rejects bracketed globs", () => {
  expect(() => validateGlobs("['invalid']")).toThrow(/invalid format/);
});

// Effects seam injection example
it("formats UTC year-month", () => {
  const fixedNow = () => new Date("2025-10-02T00:00:00Z");
  expect(formatNow(fixedNow)).toBe("2025-10");
});
```

### Anti-examples (avoid)

```ts
// Placeholder assertion — does not exercise SUT behavior
expect(true).toBe(true);

// Existence-only check without behavior
expect(validateGlobs).toBeDefined();
```

## References

- See TDD cycles and Three Laws in `tdd-first.mdc` for the nano/micro/milli cycles and boundary checks.
- Robert C. Martin — The Three Rules of TDD and Red → Green → Refactor (see `tdd-first.mdc` References)

## Related

- See `jest.config.cjs` for `testMatch` alignment
- See `tdd-first.mdc` for TDD methodology
- See `tdd-first-js.mdc` for JS/TS enforcement specifics
- See `tdd-first-sh.mdc` for Shell enforcement specifics
